ARM GAS   			page 1


   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 27,1
   3              	 .eabi_attribute 28,1
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .file "sleeplock.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.rtc_alarm_cb,"ax",%progbits
  18              	 .align 1
  19              	 .global rtc_alarm_cb
  20              	 .syntax unified
  21              	 .thumb
  22              	 .thumb_func
  23              	 .fpu fpv4-sp-d16
  25              	rtc_alarm_cb:
  26              	.LFB21:
  27              	 .file 1 "sleeplock.c"
   1:sleeplock.c   **** /*
   2:sleeplock.c   **** ** File   : sleeplock.c
   3:sleeplock.c   **** **
   4:sleeplock.c   **** ** Copyright (C) 2013-2018 Gosuncn. All rights reserved.
   5:sleeplock.c   **** **
   6:sleeplock.c   **** ** Licensed under the Apache License, Version 2.0 (the "License");
   7:sleeplock.c   **** ** you may not use this file except in compliance with the License.
   8:sleeplock.c   **** ** You may obtain a copy of the License at
   9:sleeplock.c   **** **
  10:sleeplock.c   **** **      http://www.apache.org/licenses/LICENSE-2.0
  11:sleeplock.c   **** **
  12:sleeplock.c   **** ** Unless required by applicable law or agreed to in writing, software
  13:sleeplock.c   **** ** distributed under the License is distributed on an "AS IS" BASIS,
  14:sleeplock.c   **** ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  15:sleeplock.c   **** ** See the License for the specific language governing permissions and
  16:sleeplock.c   **** ** limitations under the License.
  17:sleeplock.c   **** **
  18:sleeplock.c   **** ** brief:This demo be aimed at
  19:sleeplock.c   **** ** Author : qubo@gosuncn.cn
  20:sleeplock.c   **** **
  21:sleeplock.c   **** **  $Date: 2018/03/16 08:45:36GMT+08:00 $
  22:sleeplock.c   **** **
  23:sleeplock.c   **** */
  24:sleeplock.c   **** 
  25:sleeplock.c   **** #include "gsdk_sdk.h"
  26:sleeplock.c   **** 
  27:sleeplock.c   **** #define DEBUG_LOG(fmt,...) printf("[LOGD]:Function:%s,Line:%d,"fmt,__func__,__LINE__,##__VA_ARGS__)
  28:sleeplock.c   **** #define WARN_LOG(fmt,...) printf("[LOGW]:"fmt,##__VA_ARGS__);
  29:sleeplock.c   **** 
  30:sleeplock.c   **** 
  31:sleeplock.c   **** static gsdk_handle_t g_huart;
ARM GAS   			page 2


  32:sleeplock.c   **** gsdk_handle_t hlock;
  33:sleeplock.c   **** gsdk_handle_t g_alarm_handle;
  34:sleeplock.c   **** 
  35:sleeplock.c   **** int __io_puts(char *data, int len)
  36:sleeplock.c   **** {
  37:sleeplock.c   ****     int ret = 0;
  38:sleeplock.c   ****     if (g_huart) {
  39:sleeplock.c   ****         ret = gsdk_uart_write(g_huart, (uint8_t *)data, len, 1000);
  40:sleeplock.c   ****     }
  41:sleeplock.c   ****     return ret;
  42:sleeplock.c   **** }
  43:sleeplock.c   **** 
  44:sleeplock.c   **** /*open uart0,log information out by uart0*/
  45:sleeplock.c   **** int log_init(void)
  46:sleeplock.c   **** {
  47:sleeplock.c   ****     uart_config_t uart_config;
  48:sleeplock.c   ****     gsdk_status_t status;
  49:sleeplock.c   **** 
  50:sleeplock.c   ****     uart_config.baudrate    = UART_BAUDRATE_115200;
  51:sleeplock.c   ****     uart_config.parity      = UART_PARITY_NONE;
  52:sleeplock.c   ****     uart_config.stop_bit    = UART_STOP_BIT_1;
  53:sleeplock.c   ****     uart_config.word_length = UART_WORD_LENGTH_8;
  54:sleeplock.c   **** 
  55:sleeplock.c   ****     status = gsdk_uart_open(UART_0, &uart_config, &g_huart);
  56:sleeplock.c   ****     if (status != GSDK_SUCCESS) {
  57:sleeplock.c   ****         gsdk_syslog_printf("[PWR_DEMO]: failed to open uart %d\n", status);
  58:sleeplock.c   ****         return -1;
  59:sleeplock.c   ****     }
  60:sleeplock.c   **** 
  61:sleeplock.c   ****     WARN_LOG("[PWR_DEMO] log init....OK\r\n");
  62:sleeplock.c   **** 
  63:sleeplock.c   ****     return 0;
  64:sleeplock.c   **** }
  65:sleeplock.c   **** 
  66:sleeplock.c   **** /*timer'callback*/
  67:sleeplock.c   **** void rtc_alarm_cb(void *user_data)
  68:sleeplock.c   **** {
  28              	 .loc 1 68 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 10B5     	 push {r4,lr}
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 4,-8
  36              	 .cfi_offset 14,-4
  69:sleeplock.c   ****     (void)user_data;
  70:sleeplock.c   ****     gsdk_sleeplock_release(hlock);
  37              	 .loc 1 70 0
  38 0002 074C     	 ldr r4,.L3
  39 0004 2068     	 ldr r0,[r4]
  40              	.LVL1:
  41 0006 FFF7FEFF 	 bl gsdk_sleeplock_release
  42              	.LVL2:
  71:sleeplock.c   ****     gsdk_sleeplock_close(hlock);
  43              	 .loc 1 71 0
  44 000a 2068     	 ldr r0,[r4]
ARM GAS   			page 3


  45 000c FFF7FEFF 	 bl gsdk_sleeplock_close
  46              	.LVL3:
  72:sleeplock.c   ****     WARN_LOG("[PWR_DEMO] lock number :%d!\r\n", gsdk_sleep_islocked());
  47              	 .loc 1 72 0
  48 0010 FFF7FEFF 	 bl gsdk_sleep_islocked
  49              	.LVL4:
  50 0014 0146     	 mov r1,r0
  51 0016 0348     	 ldr r0,.L3+4
  52 0018 FFF7FEFF 	 bl printf
  53              	.LVL5:
  73:sleeplock.c   **** }
  54              	 .loc 1 73 0
  55 001c 10BD     	 pop {r4,pc}
  56              	.L4:
  57 001e 00BF     	 .align 2
  58              	.L3:
  59 0020 00000000 	 .word .LANCHOR0
  60 0024 00000000 	 .word .LC0
  61              	 .cfi_endproc
  62              	.LFE21:
  64              	 .section .text.set_alarm_timer,"ax",%progbits
  65              	 .align 1
  66              	 .syntax unified
  67              	 .thumb
  68              	 .thumb_func
  69              	 .fpu fpv4-sp-d16
  71              	set_alarm_timer:
  72              	.LFB22:
  74:sleeplock.c   **** 
  75:sleeplock.c   **** /*configure timer*/
  76:sleeplock.c   **** static gsdk_status_t set_alarm_timer()
  77:sleeplock.c   **** {
  73              	 .loc 1 77 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77 0000 10B5     	 push {r4,lr}
  78              	 .cfi_def_cfa_offset 8
  79              	 .cfi_offset 4,-8
  80              	 .cfi_offset 14,-4
  81 0002 84B0     	 sub sp,sp,#16
  82              	 .cfi_def_cfa_offset 24
  78:sleeplock.c   ****     gsdk_alarm_config_t alarm_config;
  79:sleeplock.c   ****     gsdk_status_t status;
  80:sleeplock.c   ****     alarm_config.callback = rtc_alarm_cb;//timer overtime callback function will execute
  83              	 .loc 1 80 0
  84 0004 0A4B     	 ldr r3,.L9
  85 0006 0393     	 str r3,[sp,#12]
  81:sleeplock.c   ****     alarm_config.interval = 10;//10s
  86              	 .loc 1 81 0
  87 0008 0A23     	 movs r3,#10
  88 000a 0093     	 str r3,[sp]
  82:sleeplock.c   ****     alarm_config.periodic = 0;//this timer only execute one time
  89              	 .loc 1 82 0
  90 000c 0023     	 movs r3,#0
  91 000e 0193     	 str r3,[sp,#4]
  83:sleeplock.c   ****     status = gsdk_alarm_open(&g_alarm_handle, &alarm_config);
ARM GAS   			page 4


  92              	 .loc 1 83 0
  93 0010 6946     	 mov r1,sp
  94 0012 0848     	 ldr r0,.L9+4
  95 0014 FFF7FEFF 	 bl gsdk_alarm_open
  96              	.LVL6:
  84:sleeplock.c   ****     if (status != GSDK_SUCCESS) {
  97              	 .loc 1 84 0
  98 0018 0446     	 mov r4,r0
  99 001a 10B9     	 cbnz r0,.L8
 100              	.LVL7:
 101              	.L6:
  85:sleeplock.c   ****         DEBUG_LOG("gsdk_alarm_open failed :%d\r\n", status);
  86:sleeplock.c   ****     }
  87:sleeplock.c   ****     return status;
  88:sleeplock.c   **** }
 102              	 .loc 1 88 0
 103 001c 2046     	 mov r0,r4
 104 001e 04B0     	 add sp,sp,#16
 105              	 .cfi_remember_state
 106              	 .cfi_def_cfa_offset 8
 107              	 
 108 0020 10BD     	 pop {r4,pc}
 109              	.LVL8:
 110              	.L8:
 111              	 .cfi_restore_state
  85:sleeplock.c   ****         DEBUG_LOG("gsdk_alarm_open failed :%d\r\n", status);
 112              	 .loc 1 85 0
 113 0022 0346     	 mov r3,r0
 114 0024 5522     	 movs r2,#85
 115 0026 0449     	 ldr r1,.L9+8
 116 0028 0448     	 ldr r0,.L9+12
 117              	.LVL9:
 118 002a FFF7FEFF 	 bl printf
 119              	.LVL10:
 120 002e F5E7     	 b .L6
 121              	.L10:
 122              	 .align 2
 123              	.L9:
 124 0030 00000000 	 .word rtc_alarm_cb
 125 0034 00000000 	 .word .LANCHOR1
 126 0038 00000000 	 .word .LANCHOR2
 127 003c 00000000 	 .word .LC1
 128              	 .cfi_endproc
 129              	.LFE22:
 131              	 .section .text.__io_puts,"ax",%progbits
 132              	 .align 1
 133              	 .global __io_puts
 134              	 .syntax unified
 135              	 .thumb
 136              	 .thumb_func
 137              	 .fpu fpv4-sp-d16
 139              	__io_puts:
 140              	.LFB19:
  36:sleeplock.c   ****     int ret = 0;
 141              	 .loc 1 36 0
 142              	 .cfi_startproc
 143              	 
ARM GAS   			page 5


 144              	 
 145              	.LVL11:
 146 0000 10B5     	 push {r4,lr}
 147              	 .cfi_def_cfa_offset 8
 148              	 .cfi_offset 4,-8
 149              	 .cfi_offset 14,-4
 150              	.LVL12:
  38:sleeplock.c   ****         ret = gsdk_uart_write(g_huart, (uint8_t *)data, len, 1000);
 151              	 .loc 1 38 0
 152 0002 064B     	 ldr r3,.L15
 153 0004 1C68     	 ldr r4,[r3]
 154 0006 3CB1     	 cbz r4,.L13
 155 0008 0A46     	 mov r2,r1
 156 000a 0146     	 mov r1,r0
 157              	.LVL13:
  39:sleeplock.c   ****     }
 158              	 .loc 1 39 0
 159 000c 4FF47A73 	 mov r3,#1000
 160 0010 2046     	 mov r0,r4
 161              	.LVL14:
 162 0012 FFF7FEFF 	 bl gsdk_uart_write
 163              	.LVL15:
 164              	.L11:
  42:sleeplock.c   **** 
 165              	 .loc 1 42 0
 166 0016 10BD     	 pop {r4,pc}
 167              	.LVL16:
 168              	.L13:
  37:sleeplock.c   ****     if (g_huart) {
 169              	 .loc 1 37 0
 170 0018 0020     	 movs r0,#0
 171              	.LVL17:
  41:sleeplock.c   **** }
 172              	 .loc 1 41 0
 173 001a FCE7     	 b .L11
 174              	.L16:
 175              	 .align 2
 176              	.L15:
 177 001c 00000000 	 .word .LANCHOR3
 178              	 .cfi_endproc
 179              	.LFE19:
 181              	 .section .text.log_init,"ax",%progbits
 182              	 .align 1
 183              	 .global log_init
 184              	 .syntax unified
 185              	 .thumb
 186              	 .thumb_func
 187              	 .fpu fpv4-sp-d16
 189              	log_init:
 190              	.LFB20:
  46:sleeplock.c   ****     uart_config_t uart_config;
 191              	 .loc 1 46 0
 192              	 .cfi_startproc
 193              	 
 194              	 
 195 0000 00B5     	 push {lr}
 196              	 .cfi_def_cfa_offset 4
ARM GAS   			page 6


 197              	 .cfi_offset 14,-4
 198 0002 83B0     	 sub sp,sp,#12
 199              	 .cfi_def_cfa_offset 16
  50:sleeplock.c   ****     uart_config.parity      = UART_PARITY_NONE;
 200              	 .loc 1 50 0
 201 0004 0923     	 movs r3,#9
 202 0006 8DF80430 	 strb r3,[sp,#4]
  51:sleeplock.c   ****     uart_config.stop_bit    = UART_STOP_BIT_1;
 203              	 .loc 1 51 0
 204 000a 0020     	 movs r0,#0
 205 000c 8DF80700 	 strb r0,[sp,#7]
  52:sleeplock.c   ****     uart_config.word_length = UART_WORD_LENGTH_8;
 206              	 .loc 1 52 0
 207 0010 8DF80600 	 strb r0,[sp,#6]
  53:sleeplock.c   **** 
 208              	 .loc 1 53 0
 209 0014 0323     	 movs r3,#3
 210 0016 8DF80530 	 strb r3,[sp,#5]
  55:sleeplock.c   ****     if (status != GSDK_SUCCESS) {
 211              	 .loc 1 55 0
 212 001a 094A     	 ldr r2,.L22
 213 001c 01A9     	 add r1,sp,#4
 214 001e FFF7FEFF 	 bl gsdk_uart_open
 215              	.LVL18:
  56:sleeplock.c   ****         gsdk_syslog_printf("[PWR_DEMO]: failed to open uart %d\n", status);
 216              	 .loc 1 56 0
 217 0022 30B9     	 cbnz r0,.L21
  61:sleeplock.c   **** 
 218              	 .loc 1 61 0
 219 0024 0748     	 ldr r0,.L22+4
 220              	.LVL19:
 221 0026 FFF7FEFF 	 bl puts
 222              	.LVL20:
  63:sleeplock.c   **** }
 223              	 .loc 1 63 0
 224 002a 0020     	 movs r0,#0
 225              	.L17:
  64:sleeplock.c   **** 
 226              	 .loc 1 64 0
 227 002c 03B0     	 add sp,sp,#12
 228              	 .cfi_remember_state
 229              	 .cfi_def_cfa_offset 4
 230              	 
 231 002e 5DF804FB 	 ldr pc,[sp],#4
 232              	.LVL21:
 233              	.L21:
 234              	 .cfi_restore_state
 235 0032 0146     	 mov r1,r0
  57:sleeplock.c   ****         return -1;
 236              	 .loc 1 57 0
 237 0034 0448     	 ldr r0,.L22+8
 238              	.LVL22:
 239 0036 FFF7FEFF 	 bl gsdk_syslog_printf
 240              	.LVL23:
  58:sleeplock.c   ****     }
 241              	 .loc 1 58 0
 242 003a 4FF0FF30 	 mov r0,#-1
ARM GAS   			page 7


 243 003e F5E7     	 b .L17
 244              	.L23:
 245              	 .align 2
 246              	.L22:
 247 0040 00000000 	 .word .LANCHOR3
 248 0044 24000000 	 .word .LC3
 249 0048 00000000 	 .word .LC2
 250              	 .cfi_endproc
 251              	.LFE20:
 253              	 .section .text.main,"ax",%progbits
 254              	 .align 1
 255              	 .global main
 256              	 .syntax unified
 257              	 .thumb
 258              	 .thumb_func
 259              	 .fpu fpv4-sp-d16
 261              	main:
 262              	.LFB23:
  89:sleeplock.c   **** 
  90:sleeplock.c   **** int main(void)
  91:sleeplock.c   **** {
 263              	 .loc 1 91 0
 264              	 .cfi_startproc
 265              	 
 266              	 
 267 0000 08B5     	 push {r3,lr}
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 3,-8
 270              	 .cfi_offset 14,-4
  92:sleeplock.c   ****     gsdk_status_t status;
  93:sleeplock.c   **** 
  94:sleeplock.c   ****     log_init();
 271              	 .loc 1 94 0
 272 0002 FFF7FEFF 	 bl log_init
 273              	.LVL24:
  95:sleeplock.c   **** 
  96:sleeplock.c   ****     /*open sleep lock.if open success,the lock is valid*/
  97:sleeplock.c   ****     status = gsdk_sleeplock_open("test_lock", &hlock);
 274              	 .loc 1 97 0
 275 0006 1F49     	 ldr r1,.L36
 276 0008 1F48     	 ldr r0,.L36+4
 277 000a FFF7FEFF 	 bl gsdk_sleeplock_open
 278              	.LVL25:
  98:sleeplock.c   ****     if (status != GSDK_SUCCESS) {
 279              	 .loc 1 98 0
 280 000e 98B9     	 cbnz r0,.L32
  99:sleeplock.c   ****         DEBUG_LOG("open sleeplock fail\r\n");
 100:sleeplock.c   ****         goto _fail_lock;
 101:sleeplock.c   ****     }
 102:sleeplock.c   **** 
 103:sleeplock.c   ****     /*acquire lock.That is lock AP side,AP side not enter sleep*/
 104:sleeplock.c   ****     status = gsdk_sleeplock_acquire(hlock);
 281              	 .loc 1 104 0
 282 0010 1C4B     	 ldr r3,.L36
 283 0012 1868     	 ldr r0,[r3]
 284              	.LVL26:
 285 0014 FFF7FEFF 	 bl gsdk_sleeplock_acquire
ARM GAS   			page 8


 286              	.LVL27:
 105:sleeplock.c   ****     if (status != GSDK_SUCCESS) {
 287              	 .loc 1 105 0
 288 0018 E8B9     	 cbnz r0,.L33
 106:sleeplock.c   ****         DEBUG_LOG("acquire sleeplock fail\r\n");
 107:sleeplock.c   ****         goto _fail_lock;
 108:sleeplock.c   ****     }
 109:sleeplock.c   **** 
 110:sleeplock.c   ****     /*set a timer.purpose is release lock at timer's callback*/
 111:sleeplock.c   ****     status = set_alarm_timer();
 289              	 .loc 1 111 0
 290 001a FFF7FEFF 	 bl set_alarm_timer
 291              	.LVL28:
 112:sleeplock.c   ****     if (GSDK_SUCCESS != status) {
 292              	 .loc 1 112 0
 293 001e 00BB     	 cbnz r0,.L34
 113:sleeplock.c   ****         DEBUG_LOG("alarm set failed\r\n");
 114:sleeplock.c   ****         goto _fail_lock;
 115:sleeplock.c   ****     }
 116:sleeplock.c   **** 	
 117:sleeplock.c   ****     /*start up timer*/
 118:sleeplock.c   ****     status = gsdk_alarm_start(g_alarm_handle);
 294              	 .loc 1 118 0
 295 0020 1A4B     	 ldr r3,.L36+8
 296 0022 1868     	 ldr r0,[r3]
 297              	.LVL29:
 298 0024 FFF7FEFF 	 bl gsdk_alarm_start
 299              	.LVL30:
 119:sleeplock.c   ****     if (status != GSDK_SUCCESS) {
 300              	 .loc 1 119 0
 301 0028 0346     	 mov r3,r0
 302 002a 00BB     	 cbnz r0,.L35
 120:sleeplock.c   ****         DEBUG_LOG("gsdk_alarm_start failed :%d\r\n", status);
 121:sleeplock.c   ****         goto _fail;
 122:sleeplock.c   ****     }
 123:sleeplock.c   **** 
 124:sleeplock.c   ****     vTaskDelay(12000 / portTICK_PERIOD_MS);
 303              	 .loc 1 124 0
 304 002c 4FF49660 	 mov r0,#1200
 305              	.LVL31:
 306 0030 FFF7FEFF 	 bl vTaskDelay
 307              	.LVL32:
 125:sleeplock.c   **** 
 126:sleeplock.c   ****     return 0;
 308              	 .loc 1 126 0
 309 0034 0020     	 movs r0,#0
 310              	.L24:
 127:sleeplock.c   **** _fail:
 128:sleeplock.c   ****     gsdk_alarm_close(g_alarm_handle);
 129:sleeplock.c   **** _fail_lock:
 130:sleeplock.c   ****     gsdk_sleeplock_close(hlock);
 131:sleeplock.c   ****     WARN_LOG("[PWR_DEMO] Sleep lock test failed!\n");
 132:sleeplock.c   **** 
 133:sleeplock.c   ****     return -1;
 134:sleeplock.c   **** }
 311              	 .loc 1 134 0
 312 0036 08BD     	 pop {r3,pc}
ARM GAS   			page 9


 313              	.LVL33:
 314              	.L32:
  99:sleeplock.c   ****         goto _fail_lock;
 315              	 .loc 1 99 0
 316 0038 6322     	 movs r2,#99
 317 003a 1549     	 ldr r1,.L36+12
 318 003c 1548     	 ldr r0,.L36+16
 319              	.LVL34:
 320 003e FFF7FEFF 	 bl printf
 321              	.LVL35:
 322              	.L26:
 130:sleeplock.c   ****     WARN_LOG("[PWR_DEMO] Sleep lock test failed!\n");
 323              	 .loc 1 130 0
 324 0042 104B     	 ldr r3,.L36
 325 0044 1868     	 ldr r0,[r3]
 326 0046 FFF7FEFF 	 bl gsdk_sleeplock_close
 327              	.LVL36:
 131:sleeplock.c   **** 
 328              	 .loc 1 131 0
 329 004a 1348     	 ldr r0,.L36+20
 330 004c FFF7FEFF 	 bl puts
 331              	.LVL37:
 133:sleeplock.c   **** }
 332              	 .loc 1 133 0
 333 0050 4FF0FF30 	 mov r0,#-1
 334 0054 EFE7     	 b .L24
 335              	.LVL38:
 336              	.L33:
 106:sleeplock.c   ****         goto _fail_lock;
 337              	 .loc 1 106 0
 338 0056 6A22     	 movs r2,#106
 339 0058 0D49     	 ldr r1,.L36+12
 340 005a 1048     	 ldr r0,.L36+24
 341              	.LVL39:
 342 005c FFF7FEFF 	 bl printf
 343              	.LVL40:
 107:sleeplock.c   ****     }
 344              	 .loc 1 107 0
 345 0060 EFE7     	 b .L26
 346              	.LVL41:
 347              	.L34:
 113:sleeplock.c   ****         goto _fail_lock;
 348              	 .loc 1 113 0
 349 0062 7122     	 movs r2,#113
 350 0064 0A49     	 ldr r1,.L36+12
 351 0066 0E48     	 ldr r0,.L36+28
 352              	.LVL42:
 353 0068 FFF7FEFF 	 bl printf
 354              	.LVL43:
 114:sleeplock.c   ****     }
 355              	 .loc 1 114 0
 356 006c E9E7     	 b .L26
 357              	.LVL44:
 358              	.L35:
 120:sleeplock.c   ****         goto _fail;
 359              	 .loc 1 120 0
 360 006e 7822     	 movs r2,#120
ARM GAS   			page 10


 361 0070 0749     	 ldr r1,.L36+12
 362 0072 0C48     	 ldr r0,.L36+32
 363              	.LVL45:
 364 0074 FFF7FEFF 	 bl printf
 365              	.LVL46:
 366              	.LDL1:
 128:sleeplock.c   **** _fail_lock:
 367              	 .loc 1 128 0
 368 0078 044B     	 ldr r3,.L36+8
 369 007a 1868     	 ldr r0,[r3]
 370 007c FFF7FEFF 	 bl gsdk_alarm_close
 371              	.LVL47:
 372 0080 DFE7     	 b .L26
 373              	.L37:
 374 0082 00BF     	 .align 2
 375              	.L36:
 376 0084 00000000 	 .word .LANCHOR0
 377 0088 00000000 	 .word .LC4
 378 008c 00000000 	 .word .LANCHOR1
 379 0090 00000000 	 .word .LANCHOR4
 380 0094 0C000000 	 .word .LC5
 381 0098 E0000000 	 .word .LC9
 382 009c 40000000 	 .word .LC6
 383 00a0 74000000 	 .word .LC7
 384 00a4 A4000000 	 .word .LC8
 385              	 .cfi_endproc
 386              	.LFE23:
 388              	 .global g_alarm_handle
 389              	 .global hlock
 390              	 .section .bss.g_alarm_handle,"aw",%nobits
 391              	 .align 2
 392              	 .set .LANCHOR1,.+0
 395              	g_alarm_handle:
 396 0000 00000000 	 .space 4
 397              	 .section .bss.g_huart,"aw",%nobits
 398              	 .align 2
 399              	 .set .LANCHOR3,.+0
 402              	g_huart:
 403 0000 00000000 	 .space 4
 404              	 .section .bss.hlock,"aw",%nobits
 405              	 .align 2
 406              	 .set .LANCHOR0,.+0
 409              	hlock:
 410 0000 00000000 	 .space 4
 411              	 .section .rodata.__func__.9485,"a",%progbits
 412              	 .align 2
 413              	 .set .LANCHOR2,.+0
 416              	__func__.9485:
 417 0000 7365745F 	 .ascii "set_alarm_timer\000"
 417      616C6172 
 417      6D5F7469 
 417      6D657200 
 418              	 .section .rodata.__func__.9490,"a",%progbits
 419              	 .align 2
 420              	 .set .LANCHOR4,.+0
 423              	__func__.9490:
 424 0000 6D61696E 	 .ascii "main\000"
ARM GAS   			page 11


 424      00
 425              	 .section .rodata.log_init.str1.4,"aMS",%progbits,1
 426              	 .align 2
 427              	.LC2:
 428 0000 5B505752 	 .ascii "[PWR_DEMO]: failed to open uart %d\012\000"
 428      5F44454D 
 428      4F5D3A20 
 428      6661696C 
 428      65642074 
 429              	.LC3:
 430 0024 5B4C4F47 	 .ascii "[LOGW]:[PWR_DEMO] log init....OK\015\000"
 430      575D3A5B 
 430      5057525F 
 430      44454D4F 
 430      5D206C6F 
 431              	 .section .rodata.main.str1.4,"aMS",%progbits,1
 432              	 .align 2
 433              	.LC4:
 434 0000 74657374 	 .ascii "test_lock\000"
 434      5F6C6F63 
 434      6B00
 435 000a 0000     	 .space 2
 436              	.LC5:
 437 000c 5B4C4F47 	 .ascii "[LOGD]:Function:%s,Line:%d,open sleeplock fail\015\012"
 437      445D3A46 
 437      756E6374 
 437      696F6E3A 
 437      25732C4C 
 438 003c 00       	 .ascii "\000"
 439 003d 000000   	 .space 3
 440              	.LC6:
 441 0040 5B4C4F47 	 .ascii "[LOGD]:Function:%s,Line:%d,acquire sleeplock fail\015"
 441      445D3A46 
 441      756E6374 
 441      696F6E3A 
 441      25732C4C 
 442 0072 0A00     	 .ascii "\012\000"
 443              	.LC7:
 444 0074 5B4C4F47 	 .ascii "[LOGD]:Function:%s,Line:%d,alarm set failed\015\012"
 444      445D3A46 
 444      756E6374 
 444      696F6E3A 
 444      25732C4C 
 445 00a1 00       	 .ascii "\000"
 446 00a2 0000     	 .space 2
 447              	.LC8:
 448 00a4 5B4C4F47 	 .ascii "[LOGD]:Function:%s,Line:%d,gsdk_alarm_start failed "
 448      445D3A46 
 448      756E6374 
 448      696F6E3A 
 448      25732C4C 
 449 00d7 3A25640D 	 .ascii ":%d\015\012\000"
 449      0A00
 450 00dd 000000   	 .space 3
 451              	.LC9:
 452 00e0 5B4C4F47 	 .ascii "[LOGW]:[PWR_DEMO] Sleep lock test failed!\000"
 452      575D3A5B 
ARM GAS   			page 12


 452      5057525F 
 452      44454D4F 
 452      5D20536C 
 453              	 .section .rodata.rtc_alarm_cb.str1.4,"aMS",%progbits,1
 454              	 .align 2
 455              	.LC0:
 456 0000 5B4C4F47 	 .ascii "[LOGW]:[PWR_DEMO] lock number :%d!\015\012\000"
 456      575D3A5B 
 456      5057525F 
 456      44454D4F 
 456      5D206C6F 
 457              	 .section .rodata.set_alarm_timer.str1.4,"aMS",%progbits,1
 458              	 .align 2
 459              	.LC1:
 460 0000 5B4C4F47 	 .ascii "[LOGD]:Function:%s,Line:%d,gsdk_alarm_open failed :"
 460      445D3A46 
 460      756E6374 
 460      696F6E3A 
 460      25732C4C 
 461 0033 25640D0A 	 .ascii "%d\015\012\000"
 461      00
 462              	 .text
 463              	.Letext0:
 464              	 .file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\machine\\_default_types.h"
 465              	 .file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\lock.h"
 466              	 .file 4 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_types.h"
 467              	 .file 5 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\lib\\gcc\\arm-none-eabi\\7.3.1\\include\\stddef.h"
 468              	 .file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\reent.h"
 469              	 .file 7 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\_stdint.h"
 470              	 .file 8 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\stdlib.h"
 471              	 .file 9 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/FreeRTOS/Source/include/FreeRTOSConfig.h"
 472              	 .file 10 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/FreeRTOS/Source/portable/GCC/mt2625/ARM_CM4F/portmacro.h"
 473              	 .file 11 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\sys\\errno.h"
 474              	 .file 12 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\time.h"
 475              	 .file 13 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/ports/include/arch/cc.h"
 476              	 .file 14 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/ip4_addr.h"
 477              	 .file 15 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/ip6_addr.h"
 478              	 .file 16 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/ip_addr.h"
 479              	 .file 17 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/err.h"
 480              	 .file 18 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/pbuf.h"
 481              	 .file 19 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/netif.h"
 482              	 .file 20 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/inet.h"
 483              	 .file 21 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/ip4.h"
 484              	 .file 22 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/ip6.h"
 485              	 .file 23 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/lwip/src/include/lwip/ip.h"
 486              	 .file 24 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/include/gsdk_common.h"
 487              	 .file 25 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/include/gsdk_uart.h"
 488              	 .file 26 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/include/gsdk_flash.h"
 489              	 .file 27 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/include/gsdk_alarm.h"
 490              	 .file 28 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/include/gsdk_pwr.h"
 491              	 .file 29 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/FreeRTOS/Source/include/task.h"
 492              	 .file 30 "c:\\program files (x86)\\gnu tools arm embedded\\7 2018-q2-update\\arm-none-eabi\\include\\stdio.h"
 493              	 .file 31 "E:/01\271\244\327\367\304\277\302\274/WelinkOpen_RTOS_SDK/OC_ME3616G1AV0.0B07/SDK/sdk/include/gsdk_api.h"
 494              	 .file 32 "<built-in>"
ARM GAS   			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 sleeplock.c
    {standard input}:18     .text.rtc_alarm_cb:00000000 $t
    {standard input}:25     .text.rtc_alarm_cb:00000000 rtc_alarm_cb
    {standard input}:59     .text.rtc_alarm_cb:00000020 $d
    {standard input}:65     .text.set_alarm_timer:00000000 $t
    {standard input}:71     .text.set_alarm_timer:00000000 set_alarm_timer
    {standard input}:124    .text.set_alarm_timer:00000030 $d
    {standard input}:132    .text.__io_puts:00000000 $t
    {standard input}:139    .text.__io_puts:00000000 __io_puts
    {standard input}:177    .text.__io_puts:0000001c $d
    {standard input}:182    .text.log_init:00000000 $t
    {standard input}:189    .text.log_init:00000000 log_init
    {standard input}:247    .text.log_init:00000040 $d
    {standard input}:254    .text.main:00000000 $t
    {standard input}:261    .text.main:00000000 main
    {standard input}:376    .text.main:00000084 $d
    {standard input}:395    .bss.g_alarm_handle:00000000 g_alarm_handle
    {standard input}:409    .bss.hlock:00000000 hlock
    {standard input}:391    .bss.g_alarm_handle:00000000 $d
    {standard input}:398    .bss.g_huart:00000000 $d
    {standard input}:402    .bss.g_huart:00000000 g_huart
    {standard input}:405    .bss.hlock:00000000 $d
    {standard input}:412    .rodata.__func__.9485:00000000 $d
    {standard input}:416    .rodata.__func__.9485:00000000 __func__.9485
    {standard input}:419    .rodata.__func__.9490:00000000 $d
    {standard input}:423    .rodata.__func__.9490:00000000 __func__.9490
    {standard input}:426    .rodata.log_init.str1.4:00000000 $d
    {standard input}:432    .rodata.main.str1.4:00000000 $d
    {standard input}:454    .rodata.rtc_alarm_cb.str1.4:00000000 $d
    {standard input}:458    .rodata.set_alarm_timer.str1.4:00000000 $d
                           .group:00000000 wm4.0.8fab1e1450c2b74bdd5e2aed4c325bf1
                           .group:00000000 wm4._newlib_version.h.4.875b979a44719054cd750d0952ad3fd6
                           .group:00000000 wm4.newlib.h.18.5e5ca3429233af402d406a202f1fc1ac
                           .group:00000000 wm4.ieeefp.h.77.220d9cccac42cd58761758bee2df4ce6
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.stddef.h.187.2ff233552538c6ff9b8575ca8ea52cb3
                           .group:00000000 wm4.cdefs.h.47.0bcdf94cb40e176393dd1404056825b4
                           .group:00000000 wm4.stddef.h.39.ec95e8feac892e292b69dc7ae75b0d64
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.161.5349cb105733e8777bfb0cf53c4e3f34
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
ARM GAS   			page 14


                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.161.19e15733342b50ead2919490b095303e
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.FreeRTOSConfig.h.68.1d0dd6b8cda279d0020827f5584733bd
                           .group:00000000 wm4.projdefs.h.71.1734cd3501e070360596dd847bb9d813
                           .group:00000000 wm4.portmacro.h.72.3d5d774f718d157a637f7eb960850f27
                           .group:00000000 wm4.portable.h.98.f435842f50d7864fba6a318a13e72513
                           .group:00000000 wm4.mpu_wrappers.h.71.dd245fe44d82bd40288b5a47f895c82c
                           .group:00000000 wm4.FreeRTOS.h.175.3abf49eaca38658a192da8d7c86d5374
                           .group:00000000 wm4.queue.h.72.3695320c7600effec3d17b83c99d3c0b
                           .group:00000000 wm4.semphr.h.81.476996112f7cf2dd045dbdd37a9136bc
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498
                           .group:00000000 wm4.task.h.88.da474b04c368050657453c137d8efe45
                           .group:00000000 wm4.timers.h.96.b62a20effad09455c0ed06e5f17e2a48
                           .group:00000000 wm4.lwipopts.h.39.6b59604adf87dc94bbbda24564503740
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.1ecd7b1049497a0ab61da0f6cbd4b0c6
                           .group:00000000 wm4.time.h.38.20beed93add9f31905d3a626e4660be9
                           .group:00000000 wm4.time.h.8.db4619001f026d0b4874c029fef0e91f
                           .group:00000000 wm4.time.h.2.4581ce0ffb6627cfc02162c94bf846c9
                           .group:00000000 wm4.time.h.25.483ee9b7e27a5dcca3d222ded0e25e01
                           .group:00000000 wm4.cc.h.48.d6d2c2bb4a8eeb217c55b9ca1943b7a0
                           .group:00000000 wm4.arch.h.65.8829bb52e9eb86f038bc22f28844c005
                           .group:00000000 wm4.debug.h.44.85dd174371aa97df303e04153d799135
                           .group:00000000 wm4.opt.h.77.035e4f6feedd8c96216e0818f09a9265
                           .group:00000000 wm4.def.h.33.687716bada84b2810fdf97c9d167aeeb
                           .group:00000000 wm4.ip4_addr.h.33.1a8b96da9c9099dd4d4b421392c24416
                           .group:00000000 wm4.ip6_addr.h.43.f0356dc1c9eb4011a6824b272ca0bdec
                           .group:00000000 wm4.ip_addr.h.58.d7bcbad6cfa9a793708e54980ac1c34d
                           .group:00000000 wm4.netif.h.33.379f236f9670aafd30086e50d1a89f89
                           .group:00000000 wm4.err.h.33.f97d15a7862198a77a6b19a8b190fee7
                           .group:00000000 wm4.pbuf.h.34.202868ef9162d4cb74cfc854b7b74f63
                           .group:00000000 wm4.netif.h.67.da8672002bd78982c4ab50b84285a595
                           .group:00000000 wm4.inet.h.41.0cf9f502d748021afadf1fe4fba638f4
                           .group:00000000 wm4.sockets.h.72.bc82e899e862bc38df9aee17d977f9be
                           .group:00000000 wm4.ip4.h.33.2db1e45313b1f472e08d288657c61499
                           .group:00000000 wm4.ip6.h.42.4c9fe14607f20e2a534215f8047124e1
                           .group:00000000 wm4.ip.h.49.1a1fbae54cafc9b96064363517198239
                           .group:00000000 wm4.gsdk_common.h.25.69f333dc5f5113dd7092f6831560754f
                           .group:00000000 wm4.gsdk_flash.h.25.4d08791083e4af07d64570151ac0803c
                           .group:00000000 wm4.app_loader.h.25.aa64c8d4536aca920728cda79a275eeb
                           .group:00000000 wm4.gsdk_ril.h.43.ec5a175e110d1c70143139b168262c34
                           .group:00000000 wm4.gsdk_ril_cmds.h.25.9576f30a39fa8fd69cc4f6c2fc4c8bd9

UNDEFINED SYMBOLS
gsdk_sleeplock_release
gsdk_sleeplock_close
gsdk_sleep_islocked
printf
ARM GAS   			page 15


gsdk_alarm_open
gsdk_uart_write
gsdk_uart_open
puts
gsdk_syslog_printf
gsdk_sleeplock_open
gsdk_sleeplock_acquire
gsdk_alarm_start
vTaskDelay
gsdk_alarm_close
