<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpHsl</name>
    </assembly>
    <members>
        <member name="T:DatabaseTool.FileType">
            <summary>
            Specifies kinds of files that are supported by current version (<see cref="F:DatabaseTool.DbHeader.DB_FILE_VERSION"/>) of database.
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.DB_FILE_VERSION">
            <summary>
            Current database version.
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.DB_FILE_SUB_VERSION">
            <summary>
            Current database sub-version.
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.DB_MAGIC_ID">
            <summary>
            Magic database identifier
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.DB_MAX_CUSTOMER_ID_LEN">
            <summary>
            Maximum number of characters to identify customer
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.INTERNAL_DB_NAME">
            <summary>
            If database has this string as customer ID - it means it's a full, internal DB.
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.DB_RESERVED_BYTES">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:DatabaseTool.DbHeader.id">
            <summary>
            The identifier of the database. If both customer and internal versions were produced by build,
            both will have the same id.
            </summary>
        </member>
        <member name="M:DatabaseTool.CombinedDatabase.GetFloxContent(System.String)">
            <summary>
            Gets the content of the flox form either FLOX file (XML format) or DEC file (compressed format)
            </summary>
            <param name="filePath">The file path.</param>
            <returns>XML of FLOX</returns>
        </member>
        <member name="M:DatabaseTool.CombinedDatabase.GetSoxContent(System.String)">
            <summary>
            Gets the content of the sox form either SOX file (XML format) or DEC file (compressed format)
            </summary>
            <param name="filePath">The file path.</param>
            <returns>XML of SOX</returns>
        </member>
        <member name="M:DatabaseTool.CombinedDatabase.ExtractAscii(System.String,DatabaseTool.FileType)">
            <summary>
            Extracts dtabase specified by 'fType' parameter as ASCII byte array.
            </summary>
            <param name="filePath">The file path to combined database.</param>
            <param name="fType">Type of the database to extract.</param>
            <returns>Text of the extracted database in ascii</returns>
        </member>
        <member name="M:DatabaseTool.CombinedDatabase.Extract(System.String,DatabaseTool.FileType)">
            <summary>
            Extracts dtabase specified by 'fType' parameter.
            </summary>
            <param name="filePath">The file path to combined database.</param>
            <param name="fType">Type of the database to extract.</param>
            <returns>Text of the extracted database</returns>
        </member>
        <member name="T:NBIOT_CUSTOMER_ID">
            <summary>
            This file is used to hardcoded customer information to NBIOT tools (Genie, TeraHSL, etc)
            When building for real customer, build process shuld overwrite/update this file with real customer ID
            </summary>
        </member>
        <member name="T:HslDecoder.BaseVarArray">
            <summary>
            All array log points will be deriving from this base class.
            </summary>
        </member>
        <member name="F:HslDecoder.BaseVarArray._indexOffset">
            <summary>
            This is only a dummy variable which is needed to re-use the BaseVar class. 
            </summary>
        </member>
        <member name="F:HslDecoder.BaseVarArray.m_baseVar">
            <summary>
            Underlying variable used by the Array log point. Re-using the same variable as used when 
            dealing with non-array log points.
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVarArray.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVarArray.#ctor(System.Xml.XmlNode)">
            <summary>
            Constructor which takes XML rule (from silo_db.sox) and 
            creates an object based on m_baseVar.
            </summary>
            <param name="a_xmlNode"></param>
        </member>
        <member name="M:HslDecoder.BaseVarArray.GetDoubles(System.UInt16[])">
            <summary>
            Returns input array of Int16 as array of doubles.
            </summary>
            <param name="a_rawInt16"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.BaseVarArray.GetInts(System.UInt16[])">
            <summary>
            Returns input array of Int16 as array of Int.
            </summary>
            <param name="a_rawInt16"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.BaseVarArray.GetString(System.UInt16[])">
            <summary>
            Returns input array of Int16 as a string using the formatting rules for this log point.
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVarArray.Length(System.UInt16[])">
            <summary>
            Gives the number of elements for this log point taking into account the size of the basic type.
            So if the basic type is Int32 then the length is 0.5*(size of raw int16 array).
            </summary>
            <param name="a_rawInt16"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.ArrayUint32.GetString(System.UInt16[])">
            <summary>
            Returns concatenated string for each element of the array.
            Override is needed, as we need to 'hop' two elements at
            a time.
            </summary>
        </member>
        <member name="M:HslDecoder.ArrayEnum.SetSymbols(System.Collections.Generic.SortedDictionary{System.UInt32,System.String}[])">
            <summary>
            Called by HSL decoder component to configure the applicable *.flox symbol map.    
            </summary>
            <param name="a_symbols"></param>
        </member>
        <member name="M:HslDecoder.ArrayLongEnum.SetSymbols(System.Collections.Generic.SortedDictionary{System.UInt32,System.String}[])">
            <summary>
            Called by HSL decoder component to configure the applicable *.flox symbol map.    
            </summary>
            <param name="a_symbols"></param>
        </member>
        <member name="M:HslDecoder.ArrayString.GetString(System.UInt16[])">
            <summary>
            Returns input array of Int16 as a string using the formatting rules for this log point.
            </summary>
        </member>
        <member name="T:HslDecoder.ArrayMsgTruncation">
            <summary>
            This type of array contains data in error. As such, it doesn't have a valid #Address property
            </summary>
        </member>
        <member name="M:HslDecoder.ArrayMsgTruncation.GetString(System.UInt16[])">
            <summary>
            Returns input array of Int16 as a string using the formatting rules for this log point.
            </summary>
        </member>
        <member name="T:HslDecoder.ArrayErrorPrintf">
            <summary>
            This type of array is used when a log point id is not recognised and it is treated
            as an array of ushorts.
            </summary>
        </member>
        <member name="T:HslDecoder.BaseLogPointConverter">
            <summary>
            Design time custom type converter to handle BaseLogPointConverter object.
            This allows BaseLogPoint class to be expandable in PropertyGrid.
            </summary>
        </member>
        <member name="M:HslDecoder.BaseLogPointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Method required for Design time operation of SharpHsl component
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.BaseLogPointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertsTo
            </summary>
        </member>
        <member name="T:HslDecoder.BaseLogPoint">
            <summary>
            Base class for all log points
            </summary>
        </member>
        <member name="F:HslDecoder.BaseLogPoint._init">
            <summary>
            SMF: TODO!
            </summary>
        </member>
        <member name="F:HslDecoder.BaseLogPoint._altFlatFormat">
            <summary>
            _altFormat but with new lines replaced with comma
            </summary>
        </member>
        <member name="F:HslDecoder.BaseLogPoint._hasDecodingRuleInSox">
            <summary>
            When false it means that decoding rule was generated on the fly based on log point ID==1, HdrUnKnown
            </summary>
        </member>
        <member name="M:HslDecoder.BaseLogPoint.ConvertEscapeCharacters(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Converts C style escape characters into C# real characters for example \n string -> into new line char.
            </summary>
            <param name="strIn">input string that contains (or not) C style escaped characters</param>
            <param name="warrnings">if not null, and there are invalid characters in strIn param - warrning will be logged into this list</param>
        </member>
        <member name="M:HslDecoder.BaseLogPoint.ReplaceAltFormatVSpecs(HslDecoder.BaseVar[])">
            <summary>
            Processes the AltFormat string, replacing "%v" fields with corresponding variable names.
            </summary>
            <param name="a_baseVars">The base variables.</param>
        </member>
        <member name="M:HslDecoder.BaseLogPoint.GetLogPointProperties">
            <summary>
            Returns log point poperities
            </summary>
        </member>
        <member name="T:HslDecoder.BaseLogPoint.LogPointProperties">
            <summary>
            Contains all the members which have static values across all log points with the same ID. 
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.ID">
            <summary>
            Unique log point id between 0 and (2^16 - 1).
            N.B. Some log point ids are reserved.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.IsArray">
            <summary>
            Set to true when this log point is an array type.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.Type">
            <summary>
            Determines what basic target HSL macro was used to log the raw data.
            E.g. 'printf', 'array16' etc...
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.Filter">
            <summary>
            Indicates whether this log point can be filtered at run-time 
            on the target. Log points of 'array' type always have this
            attribute set to true.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.Raw16Count">
            <summary>
            <para>Gives the count of Int16 elements that log point should have based on SOX decoder database.</para>
            <para>NOTE: If decoder database is out of sync with UE load - it's possible that real logged log point length will be different to what database thinks it should be.</para>
            <para>NOTE: If there is no decoder rule for log point (HdrUnknown) value of -1 will be returned.</para>
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.HideAttribute">
            <summary>
            This attribute marks some log points as 'hidden' when these
            are special log points required for the operation of HSL.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.Descriptor">
            <summary>
            This is normally a unique name given as a header to a log point.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.IsTwinned">
            <summary>
            Indicates whether this log point is twinned or not. 
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.IndentType">
            <summary>
            Indicates whether this log point is used for indentation or not.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.TwinnedId">
            <summary>
            This gives a possible log point id candidate which is twinned with this
            log point. Note: there isn't a 1-to-1 mapping of twinned log points.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.TwinRoot">
            <summary>
            Root log point twinned string value
            E.g. Start, End, StartAlgo.....
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.TwinSuffix">
            <summary>
            Suffix log point twinned string value
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.GroupLogId">
            <summary>
            String value of the MDF style log point name.
            Kept for legacy reason when all log points were
            assigned via an enumerated type.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.OrigFormat">
            <summary>
            Format specification string which is parsed from the target source files.
            This is the INFMT element in the *.sox
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.AltFormat">
            <summary>
            Modified format specification string which uses %x
            and where x is a natural integer type. Each %x refers
            to Variable format specifier.
            This is the OUTFMT element in the *.sox
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.SpecCount">
            <summary>
            Count of how many specifiers were found in the format
            specification string. This corresponds the number
            of variables which can be accessed for this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.ModuleRelPath">
            <summary>
            Relative path of the target source file which contained 
            this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.LineNumber">
            <summary>
            Line number in the target source file which contained
            this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticLpData.IsTypedef">
            <summary>
            Indicates where this Array log point is used to contain
            data which maps to a typedef struct. Used as part of 
            HSL log point to GKI signal mappings.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.Init">
            <summary>
            This attribute is only true when this log point is used to indicate the target has been reset.
            It is the first log point that is transmitted. 
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.ID">
            <summary>
            Unique log point id between 0 and (2^16 - 1).
            N.B. Some log point ids are reserved.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.HasDecodingRuleInSox">
            <summary>
            If 'false' it means that decoding rule does not exist in SOX file.
            In such case - decoding rule is generated in runtime based on log point ID==1 (HdrUnKnown).
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.IsArray">
            <summary>
            Set to true when this log point is an array type.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.Type">
            <summary>
            Determines what basic target HSL macro was used to log the raw data.
            E.g. 'printf', 'array16' etc...
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.Filter">
            <summary>
            Indicates whether this log point can be filtered at run-time 
            on the target. Log points of 'array' type always have this
            attribute set to true.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.Raw16Count">
            <summary>
            <para>Gives the count of Int16 elements that log point should have based on SOX decoder database.</para>
            <para>NOTE: If decoder database is out of sync with UE load - it's possible that real logged log point length will be different to what database thinks it should be.</para>
            <para>NOTE: If there is no decoder rule for log point (HdrUnknown) value of -1 will be returned.</para>
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.HideAttribute">
            <summary>
            This attribute marks some log points as 'hidden' when these
            are special log points required for the operation of HSL.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.Descriptor">
            <summary>
            This is normally a unique name given as a header to a log point.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.IsTwinned">
            <summary>
            Indicates whether this log point is twinned or not. 
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.TwinnedId">
            <summary>
            This gives a possible log point id candidate which is twinned with this log point.
            Note: there isn't a 1-to-1 mapping of twinned log points.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.TwinRoot">
            <summary>
            Root log point twinned string value.
            E.g. Start, End, StartAlgo.....
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.TwinSuffix">
            <summary>
            Suffix log point twinned string value.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.GroupLogId">
            <summary>
            String value of the Group filter.
            This is used to provide group filtering of log points. 
            Legacy note: This symbol used to be known as the Mdf symbol.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.IndentType">
            <summary>
            Indicates the log point indentation type.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.OrigFormat">
            <summary>
            Format specification string which is parsed from the target source files.
            This is the INFMT element in the *.sox
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.AltFormat">
            <summary>
            Modified format specification string which uses {x}
            and where x is a natural integer type. Each {x} refers
            to a place holder for the string formatting.
            This is a modified version of the OUTFMT element in the *.sox
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.AltFlatFormat">
            <summary>
            Modified format specification string which uses {x}
            and where x is a natural integer type. Each {x} refers
            to a place holder for the string formatting.
            This is a modified version of the OUTFMT element in the *.sox
            If there are any new line characters in the output - those are replaced by comma.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.FormatHasEscapeChars">
            <summary>
            Gets a value indicating whether formating string has C style escape characters (like \n \r \t).
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.SpecCount">
            <summary>
            Count of how many specifiers were found in the format
            specification string. This corresponds the number
            of variables which can be accessed for this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.ModuleRelPath">
            <summary>
            Relative path of the target source file which contained this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.LineNumber">
            <summary>
            Line number in the target source file which contained this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseLogPoint.LogPointProperties.IsTypedef">
            <summary>
            Indicates where this Array log point is used to contain
            data which maps to a typedef struct. Used as part of 
            HSL log point to GKI signal mappings.
            </summary>
        </member>
        <member name="T:HslDecoder.BaseVar">
            <summary>
            Base class for all log points
            </summary>
        </member>
        <member name="F:HslDecoder.BaseVar.MostSignificantByte">
            <summary>
            Constant indicating use of the most significant byte 
            </summary>
        </member>
        <member name="F:HslDecoder.BaseVar.LeastSignificantByte">
            <summary>
            Constant indicating use of the least significant byte
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVar.#ctor(System.Xml.XmlNode,System.UInt16)">
            <summary>
            If the var is 16 bit or more the a_indexOffset is updated for the next VAR to be processed.
            Two consecutive 8 bit vars will only move the index offset by 1.
            </summary>
            <param name="a_xmlNode"></param>
            <param name="a_indexOffset"></param>
        </member>
        <member name="M:HslDecoder.BaseVar.GetVarProperties">
            <summary>
            Returns log point properities
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVar.GetIndexForNextVar(System.UInt16)">
            <summary>
            Calculates the index of the underlying array for the next VAR to be processed. 
            Different VAR types consume different number of ushorts. 
            </summary>
            <param name="a_indexOffset"></param>
        </member>
        <member name="M:HslDecoder.BaseVar.GetDouble(System.UInt16[],System.Int32)">
            <summary>
            Returns a double value
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVar.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns an int value
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVar.GetString(System.UInt16[],System.Int32)">
            <summary>
            Returns input array of Int16 as a string using the formatting rules for this log point.
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVar.GetString(System.UInt16[],System.Int32,HslDecoder.StreamIndex)">
            <summary>
            This form is used when retrieving a VarEnum or ArrayEnum
            </summary>
        </member>
        <member name="M:HslDecoder.BaseVar.GetHexFormattingString">
            <summary>
            Internal function returning a formatting string for hex display
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.BaseVar.GetIntFormattingString">
            <summary>
            Internal function returning a formatting string for int display
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslDecoder.BaseVar.VarProperties">
            <summary>
            Defines log point properities
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.RawOffset">
            <summary>
            Offset value into RawData[] thus pointing to the 
            applicable Int16 for this variable; With {} specifier
            we can access any Int16 for any variable.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Index">
            <summary>
            Index value in the Vars[]
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.IsArray">
            <summary>
            Specifies whether this log point is of type array or not (i.e. printf)
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Name">
            <summary>
            Name specified by the user via the %v specifier.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.NameAlt">
            <summary>
            User provided alternative string name
             for a variable (%v specifier in the target code 
            provides a mechanism to create these alternative names.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.OrigFmt">
            <summary>
            This is the format specifier string which is extracted from
            the target source code for this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Padding">
            <summary>
            Specifies the padding string to use when formatting specifiers.
            Typically set to '0'
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Prefix">
            <summary>
            Prefix string to add when formatting the specifier.
            Typically set to '0x'
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Width">
            <summary>
             Width specifier when formatting .
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Precision">
            <summary>
            Precision specifier when formatting.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Justification">
            <summary>
            Left or right justification; Default is right.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.Symbol">
            <summary>
            This is the symbol name of the enumerated type it represents
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.FixedInt">
            <summary>
            Only used with fixed decimal floating types; Represents the number of bits for the 
            integer portion.
            </summary>
        </member>
        <member name="P:HslDecoder.IStaticVarData.FixedFrac">
            <summary>
            Only used with fixed decimal floating types; Represents the number of bits for the 
            fractional part.
            
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.RawOffset">
            <summary>
            Offset value into RawData[] thus pointing to the 
            applicable Int16 for this variable; With {} specifier
            we can access any Int16 for any variable.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.IsArray">
            <summary>
            Specifies whether this log point is of type array or not (i.e. printf)
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Index">
            <summary>
            Index value in the Vars[]; Not always the same as 
            property RawOffset as some vars may re-use any available ushort logged.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Name">
            <summary>
            User provided string name
             for a variable (%v specifier in the target code 
            provides a mechanism to create these alternative names.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.NameAlt">
            <summary>
            Default variable name provided; Consist of 'varArray' + digit of index of the variable.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.OrigFmt">
            <summary>
            This is the format specifier string which is extracted from
            the target source code for this log point.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Padding">
            <summary>
            Specifies the padding string to use when formatting specifiers.
            Typically set to '0'
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Prefix">
            <summary>
            Prefix string to add when formatting the specifier.
            Typically set to '0x'
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Width">
            <summary>
             Width specifier when formatting .
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Precision">
            <summary>
            Precision specifier when formatting.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Justification">
            <summary>
            Left or right justification; Default is right.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.Symbol">
            <summary>
            This is the symbol name of the enumerated type it represents
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.FixedInt">
            <summary>
            Only used with fixed decimal floating types; Represents the number of bits for the 
            integer portion.
            </summary>
        </member>
        <member name="P:HslDecoder.BaseVar.VarProperties.FixedFrac">
            <summary>
            Only used with fixed decimal floating types; Represents the number of bits for the 
            fractional part.
            
            </summary>
        </member>
        <member name="T:HslDecoder.VarUint8">
            <summary>
            This variable type is created when a type specifier hu/hx is used in a PRINTF type logpoint.
            Due to the fact that all logging is performed in 16bit words, a pair of 1 byte variables will
            be packed in a single word with the first var data in the most significant byte and the second
            in the least significant. If only one 8bit var is present it will consume the entire 16bit word
            and the data will be present in the least significant byte.
            </summary>
        </member>
        <member name="T:HslDecoder.VarSBin10">
            <summary>
            Same as VarBin10 but signed version of it (controlled via %y specifier in silox)
            </summary>
        </member>
        <member name="M:HslDecoder.VarUFixedXFloat.GetLong(System.UInt16[],System.Int32)">
            <summary>
            Get long value for the specified element. We lose
            fractional accuracy; Use GetDouble() for no loss.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>long</returns>
        </member>
        <member name="M:HslDecoder.VarUFixedXFloat.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Get int value for the specified element; If each element takes 3 or more ushorts, then we lose
            both fractional and integer accuracy; Use GetDouble() for no loss.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarFixed2Float.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns integer part; Use GetDouble() to avoid losing the fractional accuracy.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarFixed4Float.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns integer part; Use GetDouble() to avoid losing the fractional accuracy.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarFixed11Float.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns integer part; Use GetDouble() to avoid losing the fractional accuracy.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarFixed12Float.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns integer part; Use GetDouble() to avoid losing the fractional accuracy.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarFixed15Float.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns integer part; Use GetDouble() to avoid losing the fractional accuracy.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarFixed15DbFloat.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns integer part; Use GetDouble() to avoid losing the fractional accuracy.
            </summary>
            <param name="a_rawInt16"></param>
            <param name="a_index"></param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarEnum.SetSymbols(System.Collections.Generic.SortedDictionary{System.UInt32,System.String}[])">
            <summary>
            Called by HSL decoder component to configure the applicable *.flox symbol map.    
            </summary>
            <param name="a_symbols">Lists of symbol strings; one list per stream.</param>
        </member>
        <member name="M:HslDecoder.VarEnum.GetDouble(System.UInt16[],System.Int32)">
            <summary>
            Returns the index value that would be used in the symbol table; Indicated as 'i' in *.flox.
            </summary>
            <param name="a_rawInt16">Raw data to look into.</param>
            <param name="a_index">Index in the raw data.</param>
            <returns>double </returns>
        </member>
        <member name="M:HslDecoder.VarEnum.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns the index value that would be used in the symbol table; Indicated as 'i' in *.flox.
            </summary>
            <param name="a_rawInt16">Raw data to look into.</param>
            <param name="a_index">Index in the raw data.</param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarEnum.GetString(System.UInt16[],System.Int32,HslDecoder.StreamIndex)">
            <summary>
            Returns the symbol corresponding to the value at given index.
            </summary>
            <param name="a_rawInt16">Raw data to look into.</param>
            <param name="a_index">Index in the raw data.</param>
            <param name="a_streamIndex">Index of stream (necessary to know which symbol).</param>
            <returns>Symbol, or prompt with '?' if symbol was not found.</returns>
        </member>
        <member name="M:HslDecoder.VarLongEnum.SetSymbols(System.Collections.Generic.SortedDictionary{System.UInt32,System.String}[])">
            <summary>
            Called by HSL decoder component to configure the applicable *.flox symbol map.    
            </summary>
            <param name="a_symbols">Lists of symbol strings; one list per stream.</param>
        </member>
        <member name="M:HslDecoder.VarLongEnum.GetDouble(System.UInt16[],System.Int32)">
            <summary>
            Returns the index value that would be used in the symbol table; Indicated as 'i' in *.flox.
            </summary>
            <param name="a_rawInt16">Raw data to look into.</param>
            <param name="a_index">Index in the raw data.</param>
            <returns>double </returns>
        </member>
        <member name="M:HslDecoder.VarLongEnum.GetInt(System.UInt16[],System.Int32)">
            <summary>
            Returns the index value that would be used in the symbol table; Indicated as 'i' in *.flox.
            </summary>
            <param name="a_rawInt16">Raw data to look into.</param>
            <param name="a_index">Index in the raw data.</param>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.VarLongEnum.GetString(System.UInt16[],System.Int32,HslDecoder.StreamIndex)">
            <summary>
            Returns the symbol corresponding to the value at given index.
            </summary>
            <param name="a_rawInt16">Raw data to look into.</param>
            <param name="a_index">Index in the raw data.</param>
            <param name="a_streamIndex">Index of stream (necessary to know which symbol).</param>
            <returns>Symbol, or prompt with '?' if symbol was not found.</returns>
        </member>
        <member name="T:HslDecoder.ConsoleHandle">
            <summary>
            This class is used when SharHSL is used in console application.
            It simulates Handle of Form (that is absent in console only apps).
            </summary>
        </member>
        <member name="M:HslDecoder.ConsoleHandle.#ctor(HslDecoder.SharpHsl)">
             <summary>
             Constructor. User need to call it in console applications BEFORE calling Init() on SharpHSL
             </summary>
             <example>
             using (SharpHsl sharpHsl = new SharpHsl())
             {
               sharpHsl.HslcfgConfig = @"C:\src\tplgsm\tools\core\HslFramework\hsls\Dummy\dummy.hslcfg";
               sharpHsl.Tplgsm = @"c:\src\tplgsm";
            
               ConsoleHandle console = new ConsoleHandle(sharpHsl);
            
               sharpHsl.Init();
               sharpHsl.Filter.AddLogPoint(6742);
               sharpHsl.StartAcq(true);
               
               ConsoleHandle.Message msg = new ConsoleHandle.Message();
               while (console.GetMessage(msg) == true)
               {
                 ... process log points and sharpHSL messages here
               }
             }
             </example>
        </member>
        <member name="M:HslDecoder.ConsoleHandle.WaitForHandleOrAbort(System.Threading.WaitHandle)">
            <returns>true if application should abort</returns>
        </member>
        <member name="M:HslDecoder.ConsoleHandle.GetMessage(HslDecoder.ConsoleHandle.Message)">
            <summary>
            Gets next message (log points or infor message) for processing.
            </summary>
            <returns>true if streaming continues, false if streaming finished (or ctrl+c) was pressed</returns>
        </member>
        <member name="M:HslDecoder.ConsoleHandle.BeginInvoke(System.Delegate,System.Object[])">
            <summary>
                 Asynchronously executes the delegate on the thread that created this object.
             </summary>
        </member>
        <member name="M:HslDecoder.ConsoleHandle.EndInvoke(System.IAsyncResult)">
            <summary>
                 Waits until the process started by calling System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
                 completes, and then returns the value generated by the process.
            </summary>
        </member>
        <member name="M:HslDecoder.ConsoleHandle.Invoke(System.Delegate,System.Object[])">
            <summary>
                 Synchronously executes the delegate on the thread that created this object
                 and marshals the call to the creating thread.
            </summary>
        </member>
        <member name="P:HslDecoder.ConsoleHandle.ExitReason">
            <summary>
            Valid only when GetMessage call returns false, specifies reason for exiting of application loop
            </summary>
        </member>
        <member name="P:HslDecoder.ConsoleHandle.InvokeRequired">
            <summary>
                Gets a value indicating whether the caller must call System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
                when calling an object that implements this interface.
            </summary>
        </member>
        <member name="T:HslDecoder.ConsoleHandle.Message">
            <summary>
            Contains data from HSLS for console application
            </summary>
        </member>
        <member name="F:HslDecoder.ConsoleHandle.Message.logPoints">
            <summary>
            Collection of log points. Can be null
            </summary>
        </member>
        <member name="F:HslDecoder.ConsoleHandle.Message.infoMessage">
            <summary>
            Message from SharpHSL. Can be null
            </summary>
        </member>
        <member name="T:HslDecoder.ConsoleHandle.GetMessageExitReason">
            <summary>
            Reason for application closure
            </summary>
        </member>
        <member name="F:HslDecoder.ConsoleHandle.GetMessageExitReason.NOT_EXITED_YET">
            <summary>
            GetMessage loop not exited yet 
            </summary>
        </member>
        <member name="F:HslDecoder.ConsoleHandle.GetMessageExitReason.USER_ACTION">
            <summary>
            User called SharpHsl.Close or StopStreaming
            </summary>
        </member>
        <member name="F:HslDecoder.ConsoleHandle.GetMessageExitReason.CTRL_C_EVENT">
            <summary>
            User pressed Ctrl+C
            </summary>
        </member>
        <member name="F:HslDecoder.ConsoleHandle.GetMessageExitReason.HSLS_END_OF_ACTIVITY">
            <summary>
            HSLS finished activity (streaming, acquisition)
            </summary>
        </member>
        <member name="T:HslDecoder.DummyHslServer">
            <summary>
            This is an implementation of HslServer interface that can be used to replay SILO files without
            a need to start an instance of HSLS
            </summary>
        </member>
        <member name="M:HslDecoder.DummyHslServer.GetLogPointIdsFromName(System.String)">
            <summary>
            Retrieves the list of corresponding IDs from a LogPoint name.
            </summary>
            <param name="a_bstrName">Log point name.</param>
            <returns>List of log points, exception on error.</returns>
        </member>
        <member name="T:HslDecoder.TimerWrapContext">
            <summary>
            This class is used to keep Timer Wrap context when we stream first lobfrag.
            If lobfrag does not start with Timer Wraps - then we will attemp to generate those in run time
            so data streamed to client app will always start with timer wraps.
            NOTE: TW are separate across 4 streams - so this class will track all of those separately.
            </summary>
        </member>
        <member name="M:HslDecoder.TimerWrapContext.IsInsertionRequired">
            <returns>true if there are any TW that can be generated, false otherwise</returns>
        </member>
        <member name="M:HslDecoder.TimerWrapContext.GetExtraTimerWrapsRawData">
            <summary>
            Gets a SILO compatible binnary data with missing timerwraps
            TW has 5 bytes (1b of id and 4 of payload)
            </summary>
        </member>
        <member name="F:HslDecoder.DummyStreaming.LP_READ_COUNT_IN_ONE_GO">
            <summary>
            number of log points we will attempt to read from lobfrag in one go
            </summary>
        </member>
        <member name="M:HslDecoder.DummyStreaming.ReadFilterAndStream_OneLobfrag(System.String,System.Boolean)">
            <summary>
            Reads lobfrag, filters it and streams to client
            </summary>
            <param name="filePath">path of lobfrag to stream</param>
            <param name="firstFragment">if true - it means that it's first lobfrag streamed</param>
        </member>
        <member name="T:HslDecoder.FastBinaryReader">
            <summary>
            this class is used to speed up reading of lobfrags.
            it loads lobfrag to memory in one go
            </summary>
        </member>
        <member name="M:HslDecoder.FastBinaryReader.Dispose">
            <summary>
            This method is needed so that the Garbage Collector can be called explicitly.
            Otherwise the memory used by FastBinaryReader is not freed automatically.
            </summary>
            <remarks>See "http://stackoverflow.com/questions/4688348/call-gc-collect-before-throwing-outofmemoryexception"
            and "http://blogs.msdn.com/b/ricom/archive/2004/11/29/271829.aspx".</remarks>
        </member>
        <member name="T:HslDecoder.LobfragReader">
            <summary>
            Class used to read (and filter) HSL lobfrag stream
            </summary>
        </member>
        <member name="F:HslDecoder.LobfragReader._bytes">
            <summary>
            Filtered log point stream to be delivered to client app
            </summary>
        </member>
        <member name="M:HslDecoder.LobfragReader.Dispose">
            <summary>
            This method is needed so that the Garbage Collector can be called explicitly.
            Otherwise the memory used by FastBinaryReader is not freed automatically.
            </summary>
        </member>
        <member name="M:HslDecoder.LobfragReader.ReadLogpoints(System.Int32,System.Boolean@,HslDecoder.TimerWrapContext)">
            <summary>
            Reads specified number of log points from lobfrag
            </summary>
            <param name="lpCount">number of log points to read</param>
            <param name="eof">if set to true - end of file was reached</param>
            <param name="timerWrapContext">if not null it means that during reading of LP TW context should be filled</param>
            <returns>null if all log points are filtered out, filtered log point stream otherwise</returns>
        </member>
        <member name="T:HslDecoder.SharpHsl">
            <summary>
            Handling *.flox input file which contains all the mappings for 
            TCU events and enumerated types.
            </summary>
            <summary>
            Handling value/string conversion of EnumVar symbols.
            </summary>
            <summary>
            Provides Timestamp processing
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.MAX_NUMBER_PHYS_STREAMS">
            <summary>
            Max number of streams (physical connectors) - currently it's 4 of Hacksaw hardware
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.STREAM_MIN">
            <summary>
            Minimum stream (physical connector) index
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.STREAM_MAX">
            <summary>
            Maximum stream (physical connector) index
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.FLOX_DEFAULT_FILENAME">
            <summary>
            Flox file may be located in the same directory as the *.sox file.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.ACQ_HARDWARE_CLOCK_PERIOD">
            <summary>
            Clock period for each tick as used by the UE on chip 1/26MHz
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.MAX_INDENT_LEVEL_ALLOWED">
            <summary>
            Max indentation level that can be found; Upper limit is set by Acquistion hardware (default ~ 380)
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.ArrayAddressOffset">
            <summary>
            Represents the number of ushorts used by the Address field in every
            Array log point.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.UNKNOWN_XML_CONSTRUCT_LOGPOINT_ID">
            <summary>
            Default log point used to represent any Log point id for which the rules
            cannot be obtained from HSLS.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.UNKNOWN_XML_CONSTRUCT_LABEL">
            <summary>
            Label of the default log point used to represent any Log point id for which the rules
            cannot be obtained from HSLS.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.INCONSISTENT_XML_CONSTRUCT_LOGPOINT_ID">
            <summary>
            This log point id is used when the decoding rule
            doesn't get the right number of input data.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.INCONSISTEND_XML_CONSTRUCT_LABEL">
            <summary>
            Label of the logpoint used when the decoding rule doens't get
            the right number of input data.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.LAST_HARDCODED_LOGPOINT_ID">
            <summary>
            Represents the largest log point id which is reserved for internal use of this component.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.TIMER_WRAP_LOGPOINT_ID">
            <summary>
            This log point id is used is received from the Acquisition
            hardware to indicate a timer wrap count (0x080D hexadecimal)
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.ACQ_ERROR_LOGPOINT_ID">
            <summary>
            Generated by acquisition dll, it means that data stream was corrupted. //0x80E
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.BOUNDARY_BETWEEN_16_AND_24_BIT_ID">
            <summary>
            This can be used to identify if value is a 16bit log point ID.
            Any ID greater than this, will be a 24bit ID.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.MAX_NUMBER_OF_LOG_POINTS">
            <summary>
            Maximum number of log points that can be handled.
            Previously this was 0xFFFF but now extended to 0xFFFFFF (i.e. 24bits)
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.SERIALIZE_TAIL_BYTES">
            <summary>
            Number of "tail" bytes in a serialized LogPoint:
            These bytes should not be output to a .silo file.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._enumSymbolMap">
            <summary>
            Holds all the details on how to decode Tcu events and enumerations.
            One list of strings per physical stream i.e. per target.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._typedefEnumMap">
            <summary>
            Holds information about typedef aliases for enums
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._variantStreamMap">
            <summary>
            For each symbol used (Tcu events and enumerated types) we can have
            variations on a per stream basis. The following hashmap is used 
            to identify the stream variation. It is configured from parsing property FloxVariant.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetUintFromString(System.String)">
            <summary>
            
            </summary>
            <param name="a_i"></param>
            <returns></returns>
        </member>
        <member name="F:HslDecoder.SharpHsl._regExp">
            <summary>
            Regex object are thread safe and it's much faster to store this precompiled regex
            rather than creating an instance each time UpdateVariantStreamMap is called
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ParseVariantAttribOptions(HslDecoder.FloxVariantConfig)">
            <summary>
            Parses and sets how each stream is affected by *.flox variant specifications.
            </summary>
            <param name="a_variantConfigObject">Contains details of how each stream is configured with regard to *.flox variants</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.PassMessageToGuiThread(HslDecoder.HslInfoMsgEvent)">
            <summary>
             This will pass message to GUI thread in safe way.
            </summary>
            <param name="a_msgPack"></param>
        </member>
        <member name="F:HslDecoder.SharpHsl._logPointRules">
            <summary>
            This will permit to retrieve any Log point rule by directly
            indexing into the dictionary.
            N.B. Only references are stored so memory impact is minimised.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetLogPointStore(System.UInt32)">
            <summary>
            Retrieves the LogPointStore for given LogId.
            If it doesn't exist, creates it and remembers it for the next time.
            </summary>
            <param name="a_id">LogId to look for.</param>
            <returns>Corresponding LogPointStore.</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.CreateXmlDecoderConstruct(System.UInt32)">
            <summary>
            Builds decoding rule from XML info obtained from HSLS
            and adds it to the _logPointRules dictionary.
            </summary>
            <param name="a_id">LogId to consider.</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.CreateLogPoint(System.UInt32,HslDecoder.StreamIndex,System.UInt64,System.UInt16,System.UInt32,System.UInt16[])">
            <summary>
            Creates a LogPoint from the given parameters.
            If the LogPoint's ID is not recognized, or if the LogPoint could not be restored
            with its current rules: return OBSOLETE_LOGPOINT_ID.
            </summary>
            <param name="a_logId">LogId to use as base.</param>
            <param name="a_streamIndex">HSL stream.</param>
            <param name="a_ticks">Timestamp in ticks.</param>
            <param name="a_indent">Indent level.</param>
            <param name="a_address">Address for an Array point (0 means not an array).</param>
            <param name="a_rawUshorts">The raw data.</param>
            <returns>The created LogPoint.</returns>
            <remarks>For a Timer wrap log point, use CreateTimerWrap().</remarks>
        </member>
        <member name="M:HslDecoder.SharpHsl.CreateTimerWrap(HslDecoder.StreamIndex,System.UInt64)">
            <summary>
            Creates a TimerWrap log point: use it instead of CreateLogPoint().
            </summary>
            <param name="a_streamIndex">HSL stream.</param>
            <param name="a_timestamp">Timestamp in ticks: Timer wrap value will be deduced from it.</param>
            <returns>The created LogPoint.</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.ReadTimerWrapHslMessage(System.Byte*,HslDecoder.LogPoint@,System.Boolean)">
            <summary>
            Timer wrap are needed to correctly timestamp all log points. However it is still 
            possible to disable TimerWraps via the 'Extra filtering features' in  HSLS.exe. 
            
            Timer wraps are shared between all streams and do not carry stream information. 
            Due to legacy reasons all timer wraps are internally assigned to stream 0.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._abort">
            <summary>
            used to abort COM events
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.WaitUntillHslsIsReadyForNewConnection">
             <summary>
            HSLS is implemented as COM component inside EXE file.
            It's possible that at the moment some other client application requested shut down of HSLS.
            In that case our client app should wait for this instance of HSLS to disappear and then attempt connection.
            This is an unfortunate limitation of COM enviroment.
             </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ReleaseComObjectIfRequired(System.Object)">
            <summary>
            Releases an object IF it's required.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._streamingStoppedEvent">
            <summary>
            This event will be signalled when streaming is not enabled
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._sharpHslCallingClose">
            <summary>
            This event will be signalled when SharpHSL is calling Close()
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._emulateInvokeOnNewHslsDataEvent">
            <summary>
            This event is signalled when we come back from the GUI thread and all the log points have been processed.
            This is used NOT to flood GUI thread with BeginInvoke() calls
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetIndentLevel(HslDecoder.IndentType,HslDecoder.StreamIndex)">
            <summary>
            Returns for a log point the applicable indentation level.
            If the log point itself is of type START/END then the indentation is
            incremented/decremented respectively.
            </summary>
            <param name="a_indentType"></param>
            <param name="a_streamIndex"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetCurrentProcessId">
            <summary>
            The current process id is used to configure the HSLS in case this
            client crashes/disconnects unexpectedly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.Deserialize(System.Byte[])">
            <summary>
            Converts back a serialized log point into LogPoint class.
            It's possible only after calling SharpHsl.Init().
            </summary>
            <param name="lpBinData">Binary data of previously serialized log point using LogPoint.Serialize() call</param>
            <returns>Instance of LogPoint class.
            If LP is a TimerEvent or ItrLogPoint - use cast to retrieve correct class type.</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.Init">
            <summary>
            Initiates connection to HSLS. You need to call this function first!
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ConfigureFloxFileLocationAndTickRatio">
            <summary>
            Obtain the location of the Flox file from the location of the Sox file.
            From the sox file, obtain the scheme which is used for setting the default tick ratio
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetSchemeValueFromFile(System.String)">
            <summary>
            Retrieves the &quot;scheme&quot; field from Silox database file.
            </summary>
            <param name="a_fileToParse">Input silo_db.sox file.</param>
            <returns>&quot;t1&quot; if scheme information was not found in the input file.</returns>
            <remarks>To obtain the scheme attribute value we don't load the file as XML as it would be </remarks>
            quite intensive operation due to the size of the silox database.
        </member>
        <member name="M:HslDecoder.SharpHsl.PrepareStreaming">
            <summary>
            Registers for Log points in HSLS amd prepares decoding rules
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.StartAcq(System.Boolean)">
            <summary>
            Starts acquisition. Make sure to call Init() first.
            If HSLS is configured for SILO file replay only - this function will fail.
            To test if start of acquisition if possible - test CanAcquireData property.
            </summary>
            <param name="a_startStreamingToo">If true also streaming of data will be started</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.StopAcq(System.Boolean)">
            <summary>
            Stops acquisition.
            </summary>
            <param name="a_stopStreamingToo">If true also streaming of data will be stopped</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.StartStreaming">
            <summary>
            Starts streaming of data to this client application.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.SendData(System.SByte[])">
            <summary>
            Valid only if you're connected to acquisition hardware that supports bi-directional communication.
            </summary>
            <param name="dataToSend">Data to send</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.StopStreaming">
            <summary>
            Stops streaming of data to this client application.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.Close">
            <summary>
            Closes connection to HSLS
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.HasLogPointXml(System.UInt32)">
            <summary>
            Determines whether specified ID has a decoding rule in SOX file.
            </summary>
            <param name="a_id">ID of log point</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetLogPointXml(System.UInt32)">
            <summary>
            Returns an XML from SILO database for given logpoint ID.
            It's for advanced use only and it's unlikely you will need to use it.
            </summary>
            <param name="a_id">ID of log point</param>
            <returns>XML for specified log point</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.HslsStopAcqComCall">
            <summary>
            This is being called asynchronously to avoid any potential lock ups
            on the HSLS. E.g. If we fire a Stop request and the HSLS fires new log points
            event after then because the new log point event is processed via an Invoke() call
            the stop request cannot be completed on the HSLS and we have a lock up.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.#ctor">
            <summary>
            This constructor is used for CsUnit testing where the
            Dispose() is controlled in the test application
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.#ctor(System.ComponentModel.IContainer)">
            <summary>
            This constructor ensures that the parent control will hold a reference
            to this component so that when the parent closes, it will call the
            Dispose() method.
            </summary>
            <param name="container">Parent container</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.ReleaseEventHooks">
            <summary>
            This method should always be called as part of the main GUI thread.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.HslsNewLogPointsHandler(System.Object)">
            <summary>
            Entry point for the batched log points event received from HSLS
            </summary>
            <param name="a_vaArrRawData"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplyThrottling">
            <summary>
            As processing of log points takes a lot of MIPS,
            some throttling is required on this event thread
            to avoid returning and getting another event from HSLS.
            By delaying returning back form the HSLS raw log points
            event, it is possible to give more time to the GUI.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ServerManagement_OnNewRawLogPoints(HslDecoder.HslRawDataEvent)">
            <summary>
            We process all the raw log points before dispatching to user registered
            events of formatted LogPoints[].
            IMPORTANT: The event dispatcher OnNewLogPoints() is being called as part of the main GUI thread
            so it is safe to update GUI components although regular refresh while processing
            the data will ensure the GUI remains responsive.
            </summary>
            <param name="blob"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetHslFrameworkRootDir">
            <summary>
            Get root path to HslFramework directory. 
            The path is dependent on whether enviro is based on legacy %TPLGSM% or not
            </summary>
            <returns></returns>
        </member>
        <member name="F:HslDecoder.SharpHsl._tickRatioType">
            <summary>
            Default tick ratio being set for T1 project.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._timerWrap">
            <summary>
            Current Timer Wrap value shared for all streams.
            NOTE: timer wrap offset is the counter shifted 2 bytes to the left
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl._latestTimeStamp">
            <summary>
            Latest Timestamp for each stream.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.SetTimerWrapFromCounter(System.UInt32)">
            <summary>
            Sets the TimerWrap offset from the counter given by LogPoint.
            </summary>
            <param name="a_timerWrapCounter">The counter: to be left-shifted by 2 bytes.</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetTimerWrap">
            <summary>
            Returns the TimerWrap offset for given stream.
            </summary>
            <returns>TimerWrap offset: to add to the LogPoint's 2-byte Timestamp.</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetTimerWrapFromTickCount(System.UInt64)">
            <summary>
            When log point is created - TickCount is calculated taking into account number of timer wraps
            and time stamp of log point. This function extracts timer wrap count from GetTickCount
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetHumanTimestamp(System.UInt16)">
            <summary>
            Returns the log point's timestamp expressed in seconds
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetTargetTimeFrame(HslDecoder.StreamIndex,System.UInt16)">
            <summary>
            Returns the timestamp according the to the target timer framework (qbits, chips...)
            </summary>
            <returns>ulong</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.GetTargetTimeFrame(HslDecoder.LogPoint)">
            <summary>
            Returns the given LogPoint's timestamp according to the target's time framework (qbits, chips...)
            </summary>
            <param name="a_logPoint">LogPoint owning the timestamp to translate.</param>
            <returns>Timestamp in target units.</returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.SecondsToTargetTime(System.Double)">
            <summary>
            Returns the input value (in seconds) translated into target units (qbits, chips...)
            </summary>
            <param name="a_seconds">Time in seconds</param>
            <returns>Time in target units (qbits, chips, ...).</returns>
        </member>
        <member name="P:HslDecoder.SharpHsl.IdsWanted">
            <summary>
            This property is OBSOLETE and will be removed in future. Please DONT use it.
            Use 'Filter' property instead.
            </summary>
        </member>
        <member name="E:HslDecoder.SharpHsl.OnNewRawLogPoints">
            <summary>
            Fires when a block of raw log points has been received from HSLS.
            Caution! This property is reset to null when calling SharpHsl.Close().
            </summary>
        </member>
        <member name="E:HslDecoder.SharpHsl.OnNewLogPoints">
            <summary>
            Fires when a block of populated log points is ready
            </summary>
        </member>
        <member name="E:HslDecoder.SharpHsl.OnNewInfoMessage">
            <summary>
            Fires when a message is to inform the user of errors/warning/info
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslsConnectionType">
            <summary>
            Specifies if to connect to HSLS or not.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.Filter">
            <summary>
            Specifies HSL data filter for this application.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.PlatformType">
            <summary>
            Target platform being connected; Set when HSLS is initialised with a *.hslcfg.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslsState">
            <summary>
            One of the HslsStateType indicating the connection state of the HSLS server component.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.CanAcquireData">
            <summary>
            This property indicates if currently loaded HSLS configuration file (HSLCFG) is configured for acquisition.
            It can be called only after call to Init() function.
            Value of 'false' means that HSLCFG is set to replay pre-acquired SILO file, 'true' means that acquisition can be started.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.StreamingOn">
            <summary>
            Indicates whether streaming is on during an acquisition.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.AcquisitionOn">
            <summary>
            Indicates whether acquisition is on.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslsConnection">
             <summary>
             This object gives an access to IHslServer interface
             without exposing raw com object
            
             IMPORTANT NOTICE: you don't need to call:
             System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
             </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslConfiguration">
             <summary>
             This object gives an access to IHslConfiguration interface
             without exposing raw com object
            
             IMPORTANT NOTICE: you don't need to call:
             System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
             </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslFilter">
             <summary>
             This object gives an access to IHslFilter interface
             without exposing raw com object
            
             IMPORTANT NOTICE: you don't need to call:
             System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
             </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.SiloFileLoc">
            <summary>
            Full path of *.silo created by HSLS following start of acquisition.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslcfgConfig">
            <summary>
            HSLS configuration file to use (*.hslcfg); Make sure it exists and is valid (by using it manually).
            If you have an SPACK package - you can decompress it to some temporary directory like this:
              sharpHsl.HslcfgConfig = SpackDeCompressor.DeCompress(@"c:\mySpack.spack", @"c:\temp\myTempDir");
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.FormHandle">
            <summary>
            Handle of the main Form; This is required to dispatch events into the GUI thread; Configured automatically.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.Mtools">
            <summary>
            Value to set for %MTOOLS% will be passed to HSLS.
            If in your HSLS profile you don't use %MTOOLS%, then you don't need to set this variable.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.StackRoot">
            <summary>
            Value to set for %STACK_ROOT% will be passed to HSLS.
            If in your HSLS profile you don't use %STACK_ROOT%, then you don't need to set this variable.
            HSLS uses it to specify the root location of the stack code.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.FloxFile">
            <summary>
            File path of *.flox  which allows decoding of enumerations and Timer events; Set at run-time.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.FloxVariantItems">
            <summary>
            Specifies any variant options to apply to the loading of *.flox
            when decoding Timer Events and enumerations.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.LogPointsProcessed">
            <summary>
            Gives the cumul number of log points processed since last Init().
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.HslsFilterInterface">
            <summary>
            Handle to the HSLS interface controlling the filtering.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.TrackIndentLevels">
            <summary>
            Switches between SharpHsl tracking indent levels (start/stop logpoints) and manual mode
            in which the external app is supposed to provide the indentation information.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.IndentLevel">
            <summary>
            Keeps track of the indent level for all log points.
            Each (Start) will increment and each (End) will decrement.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.TimerWrapsForwarded">
            <summary>
            Controls whether the TimerWraps received from HSLS are also wrapped as a log point and
            presented to the User application. By default, the TimerWraps are not presented (forwarded)
            to the user application. Note that the TimerWraps should always (can still be disabled in HSLS)
            be received internally to SharpHsl as they are needed to fully resolve time stamps of log points.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.Symbols">
            <summary>
            Public access to the Symbols interface.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.TickRatioType">
            <summary>
            Time formatting to apply for representing the target's clock
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.AltTickRatioNum">
            <summary>
            Numerator value of fraction specified for SILO_ALT_FORMAT
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.AltTickRatioDenom">
            <summary>
            Denominator value of fraction specified for SILO_ALT_FORMAT
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.TickRatio">
            <summary>
            Ratio applied per tick of the log point timestamp
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.IdFiltering">
            <summary>
            This class is obsolete and might be removed in future - Filer object should be used instead. 
            It's kept only for backward compability
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.#ctor(HslDecoder.SharpHsl)">
            <summary>
            Constuctor
            </summary>
            <param name="a_parent"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.Add(System.String)">
            <summary>
            The log point Descriptor specified becomes part of the filtered
            in log points. 
            Note that its Id will only be known when at least received once.
            </summary>
            <param name="a_logPointDescriptor">'Friendly' name of log point Id; Case sensitive. e.g. Tim_Tdq_Entry</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.AddModule(System.String)">
            <summary>
            This adds all log points, which can be found in that module, in
            the filtered in list of log point Ids.
            Note that Id(s) will only be known when at least received once.
            </summary>
            <param name="a_modulePath">Module path relative to TPLGSM e.g. modem\phy\2g.mod\lib\src\eq.c</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.SetFilterMode(HslServerLibrary.FilterMode)">
            <summary>
            Configures how filtering is applied. For maximum performance, 
            setting of HslServerLibrary.FilterMode.Enabled_filterLob  will 
            ensure maximum MIPS is available to the client application; With
            this mode, the log points stored to disk before streaming are also
            filtered.
            </summary>
            <param name="a_filterMode"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.Add(System.UInt32)">
            <summary>
            Add single log point Id to the list of Ids to be filter in.
            </summary>
            <param name="a_id"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.Add(System.UInt32[])">
            <summary>
            Add an array of log point Ids to the list of Ids to be filtered in.
            </summary>
            <param name="a_ids"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.Remove(System.UInt32)">
            <summary>                                                        
            Remove single log point Id from the list of Ids to be filtered in.
            </summary>
            <param name="a_id"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.IdFiltering.Remove(System.UInt32[])">
            <summary>
            Remove an array of log point Ids from the list of Ids to be filtered in.
            </summary>
            <param name="a_ids"></param>
        </member>
        <member name="T:HslDecoder.SharpHsl.FilterType">
            <summary>
            Type of filtering for this application
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.FilterType.UseApplicationFilter">
            <summary>
            Application specifies a required filter
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.FilterType.UseDefaultHslsFilter">
            <summary>
            Application does not provide any filter - instead it will get whatever is specified
            in HSLS "Default Filter" dialog.
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.ApplicationFilter">
            <summary>
            Specifies filter details for this application
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.IsEmpty">
            <summary>
            Specifies if filter is empty (contains no log points, no modules)
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.AddLogPoint(System.UInt32)">
            <summary>
            Adds a log point to the filter (if not already there)
            </summary>
            <param name="logPointID">log point ID</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.AddLogPoint(System.String)">
            <summary>
            Adds a log point to the filter (if not already there)
            </summary>
            <param name="logPointName">log point name</param>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.AddModule(System.String)">
            <summary>
            Adds log points from whole module
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.RemoveLogPoint(System.UInt32)">
            <summary>
            Removes log point from the list
            </summary>
            <param name="logPointID"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.RemoveModule(System.String)">
            <summary>
            Removes module from the list
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilter.CommitToHsls">
            <summary>
            Any changes to filter are not forwarded to HSLS (commited) unless this function is called.
            This function is automaticaly called when application calls StartStreaming (or StartTest(true)).
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.ApplicationFilter.FilterSilo">
            <summary>
            Default: false
            If set to 'true' - specifies that application filter should be used also to filter binary SILO file that is created during acquisition.
            If set to 'false' (default) - specifies that filter is applied only to data streaming from HSLS, and if acquisition is present - all data should be logged to disk.
            NOTE: used ONLY then Filter Type is set to UseApplicationFilter!
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.ApplicationFilter.Type">
            <summary>
            Type of filtering for this application.
            UseApplicationFilter: (default) specifies that application will provide a filter.
            UseDefaultHslsFilter: specifies that application does not provide it's own filter - and instead whatever is specified in HSLS 'Configure Default Filter' dialog is used.
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.ApplicationFilter.LogPointIds">
            <summary>
            Individual LP IDs.
            NOTE: used ONLY then Filter Type is set to UseApplicationFilter!
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.ApplicationFilter.Modules">
            <summary>
            Whole modules.
            NOTE: used ONLY then Filter Type is set to UseApplicationFilter!
            </summary>
        </member>
        <member name="P:HslDecoder.SharpHsl.ApplicationFilter.TcuEventEnabled">
            <summary>
            Specifies if TCU events are in the filter of not.
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ArrayFilterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Method required for Design time operation of SharpHsl component
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.ArrayFilterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertsTo
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.ApplicationFilterConverter">
            <summary>
            Design time custom type converter to handle FloxVariantConfig object
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilterConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Method required for Design time operation of SharpHsl component
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.ApplicationFilterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertsTo
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.InvalidPropertyException">
            <summary>
            Invalid Property Exception
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.IllegalHslsOperation">
            <summary>
            Invalid Hsls Operation Exception
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.IllegalHslsOperation.#ctor(System.String)">
            <summary>
            This constructor does not pass any information to event callback - just throws and exception
            It's used mostly in SharpHSL API on user calls.
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.InvalidLogPointConstruct">
            <summary>
            Invalid Log Point Construct Exception
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.InvalidHslsData">
            <summary>
            Invalid Hsls Data Exception
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.InvalidFloxConfig">
            <summary>
            Invalid Flox Configuration Exception
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.LogPointStore">
            <summary>
            Container for the static properties of a log point
            </summary>
        </member>
        <member name="M:HslDecoder.SharpHsl.LogPointStore.#ctor(HslDecoder.BaseLogPoint)">
            <summary>
            Constructor for single message log points (i.e. M_FrHslPrintf0())
            </summary>
            <param name="a_baseLogPoint"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.LogPointStore.#ctor(HslDecoder.BaseLogPoint,HslDecoder.BaseVar[])">
            <summary>
            Constructor for multiple message log points (i.e. M_FrHslPrintfx() where x is 1,2,...)
            </summary>
            <param name="a_baseLogPoint"></param>
            <param name="a_baseVars"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.LogPointStore.#ctor(HslDecoder.BaseLogPoint,HslDecoder.BaseVarArray)">
            <summary>
            Constructor for array log points (e.g. M_FrHslArray16()).
            </summary>
            <param name="a_baseLogPoint"></param>
            <param name="a_baseArray"></param>
        </member>
        <member name="M:HslDecoder.SharpHsl.LogPointStore.GetBaseLogPoint">
            <summary>
            Method to access the underlying log point object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.LogPointStore.GetBaseVars">
            <summary>
            Method to access the underlying log point variable objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.SharpHsl.LogPointStore.GetBaseArray">
            <summary>
            Method to access the underlying log point array variable object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslDecoder.SharpHsl.GuiThreadDelegate">
            <summary>
            Generic delegate used for putting worker-thread operation in the GUI thread
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.AcquisitionRunState">
            <summary>
            Describes state of Acquistion
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.AcquisitionRunState.RS_AcqStartIgnored">
            <summary>
            ACQ start was requested by user - but was ignored by HSLS as SILO replay-only profile is loaded.
            In this mode we will allow user to call StopAcq() once (and ignore this call)
            This is used to allow to write applciations that always call StartAcq()/StopAcq()
            and work also for SILO replay.
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.StreamingRunState">
            <summary>
            Describes state of Streaming
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.OnNewRawLogPointsEventType">
            <summary>
            This delegate will pass the raw HSLS data for processing into the GUI thread
            </summary>
        </member>
        <member name="T:HslDecoder.SharpHsl.TargetFramingType">
            <summary>
            The time framing type to apply for the target being connected.
            </summary>
        </member>
        <member name="F:HslDecoder.SharpHsl.TargetFramingType.QBIT_FORMAT">
            2G stack time framing
        </member>
        <member name="F:HslDecoder.SharpHsl.TargetFramingType.FDD_CHIP_FORMAT">
            3G stack time framing, FDD
        </member>
        <member name="F:HslDecoder.SharpHsl.TargetFramingType.TDD_CHIP_FORMAT">
            3G stack time framing, TDD
        </member>
        <member name="F:HslDecoder.SharpHsl.TargetFramingType.ALT_FORMAT">
            User specified time framing to apply
        </member>
        <member name="T:HslDecoder.FloxVariantConfig">
            <summary>
            Main class to configure the variant names of Tcu events
            </summary>
        </member>
        <member name="F:HslDecoder.FloxVariantConfig.StreamVariantList">
            <summary>
            
            </summary>
        </member>
        <member name="M:HslDecoder.FloxVariantConfig.#ctor">
            <summary>
            Constructor initialising the members containing the Flox variants for each stream.
            </summary>
        </member>
        <member name="M:HslDecoder.FloxVariantConfig.IsEmpty">
            <summary>
            Returns true if at least one stream has some variant information for displaying the TCU events.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.FloxVariantConfig.SetStreamVariantOption(System.Int32,System.String)">
            <summary>
            Specifies for a given a_streamIndex which options (semi-colon delimited) are applicable. 
            </summary>
            <param name="a_streamIndex"></param>
            <param name="a_variantOption"></param>
        </member>
        <member name="M:HslDecoder.FloxVariantConfig.SetAllStreams(System.String)">
            <summary>
            Same as SetStreamVariantOption() but applied for all streams at the same time.
            </summary>
            <param name="a_variantOption"></param>
        </member>
        <member name="M:HslDecoder.FloxVariantConfig.SetStreams(System.String,System.String)">
            <summary>
            The a_variantOption is set to each stream element in a_streamSpec.
            </summary>
            <param name="a_streamSpec"></param>
            <param name="a_variantOption"></param>
        </member>
        <member name="P:HslDecoder.FloxVariantConfig.Stream0">
            <summary>
            Comma delimited list of variant options to apply for stream 0. e.g. 'gprs,amr'
            </summary>
        </member>
        <member name="P:HslDecoder.FloxVariantConfig.Stream1">
            <summary>
            Comma delimited list of variant options to apply for stream 1. e.g. 'gprs,amr'
            </summary>
        </member>
        <member name="P:HslDecoder.FloxVariantConfig.Stream2">
            <summary>
            Comma delimited list of variant options to apply for stream 2. e.g. 'gprs,amr'
            </summary>
        </member>
        <member name="P:HslDecoder.FloxVariantConfig.Stream3">
            <summary>
            Comma delimited list of variant options to apply for stream 3. e.g. 'gprs,amr'
            </summary>
        </member>
        <member name="T:HslDecoder.FloxVariantConverter">
            <summary>
            Design time custom type converter to handle FloxVariantConfig object
            </summary>
        </member>
        <member name="M:HslDecoder.FloxVariantConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Method required for Design time operation of SharpHsl component
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.FloxVariantConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Method required for Design time operation of SharpHsl component
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.FloxVariantConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            This gets a string as input and outputs a valid FloxVariantConfig object.
            So the string needs to be parsed to obtain the stream specific configurations.
            e.g. valid input = '0:gprs;1,2:amr,dummy;alternate'
            </summary>
        </member>
        <member name="M:HslDecoder.FloxVariantConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Input is a FloxVariantConfig object which needs to represented as a string
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration">
            <summary>
            This dialogue enables user to select a number of LogIds for filtering.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.GroupDefinitions">
            <summary>
            The one and only group definitions.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.LogPointsByID">
            <summary>
            All log points keyed by ID.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.LogPairsByName">
            <summary>
            Twinned log points keyed by Root name.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Modules">
            <summary>
            Modules defined in the current database.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.CurrentModule">
            <summary>
            The module currently displayed (in Modules tab).
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.CurrentGroup">
            <summary>
            The group currently displayed (in Groups tab).
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.#ctor(System.String,System.UInt32[],System.String[])">
            <summary>
            Constructor with .sox file path.
            </summary>
            <param name="a_soxPath">Path for the silox database (.sox).</param>
            <param name="a_initialLogIds">Initial LogIds to select.</param>
            <param name="a_initialItr">ITR configuration strings.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Initialize(System.String)">
            <summary>
            Retrieves LogPointInfo from the given .sox file.
            </summary>
            <param name="a_soxPath">Path of the .sox file.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.SelectPoint(HslDecoder.FormFilterConfiguration.LogPointInfo,System.Boolean)">
            <summary>
            Selects or unselects given point and its associates.
            </summary>
            <param name="a_lpi">Point to (un)select.</param>
            <param name="a_select">New selection state.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.PopulateModulesGrid">
            <summary>
            Fills the Modules grid with all module names.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.PopulateModulePointsGrid">
            <summary>
            Fills the ModulePoints grid with all points belonging to CurrentModule.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.PopulateGroupsGrid">
            <summary>
            Fills the Groups grid with all group names.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.UpdateGroupsGrid">
            <summary>
            Updates the previously populated Groups grid.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.PopulateSubgroupsGrid">
            <summary>
            Fills the Subgroups grid with all subgroup names.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.UpdatePriority">
            <summary>
            Computes the overall priority and updates the associated ComboBox accordingly.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.PriorityToString(System.Int32)">
            <summary>
            Gives the string value for a priority level.
            </summary>
            <param name="prio">Priority level.</param>
            <returns>Corresponding string value: PRIO_NONE instead if "-1".</returns>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.SelectAllPoints(System.Boolean,System.Boolean)">
            <summary>
            Mark or unmark all points as selected.
            Also (un)selects all Groups, or all Modules, depending the active Tab.
            </summary>
            <param name="bSelect">true to select, false to unselect.</param>
            <param name="bUpdateGUI">true to also update the GUI display.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.ComputeSelectedLogIds">
            <summary>
            Computes the logIds really selected according to each log point's configuration
            and Module / Group selection mode.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnLoad(System.Object,System.EventArgs)">
            <summary>
            Handles the Load event on the form:
            Populates the appropriate grid depending on Tab initially selected.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnCellDirtyStateChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CurrentCellDirtyStateChanged event:
            if the current cell is a CheckBox, end the editing operation.
            This is so we don't have to click in another cell to commit value change.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnTabDeselecting(System.Object,System.Windows.Forms.TabControlCancelEventArgs)">
            <summary>
            Handles the Deselecting event on the TabControl:
            asks the user to confirm, before clearing all points selection.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnTabSelected(System.Object,System.Windows.Forms.TabControlEventArgs)">
            <summary>
            Handles the Selected event on the TabControl:
            populates the appropriate grid.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnPointCellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Handles the CellContentClick and CellContentDoubleClick events
            on a Select cell of the Points grids:
            (un)selects the LogPoint accordingly.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnOK(System.Object,System.EventArgs)">
            <summary>
            Handles the OK button: computes selected logIds.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnCancel(System.Object,System.EventArgs)">
            <summary>
            Handles the Cancel button.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnFileLoad(System.Object,System.EventArgs)">
            <summary>
            Handles the "Load from file..." button:
            prompts for a location to load the Filter file from.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnFileSave(System.Object,System.EventArgs)">
            <summary>
            Handles the "Save to file..." button:
            prompts for a location to save the Filter file.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnDataError(System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs)">
            <summary>
            Handles the DataError event on either DataGridView.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnSelectAllModules(System.Object,System.EventArgs)">
            <summary>
            Handles the "Select all modules" button:
            selects all modules (doesn't change each log point's individual selection).
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnClearAllModules(System.Object,System.EventArgs)">
            <summary>
            Handles the "Clear all modules" button:
            unselects all modules (doesn't change each log point's individual selection).
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnSelectAllModulePoints(System.Object,System.EventArgs)">
            <summary>
            Handles the "Select all points" button:
            selects all points for the displayed module.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnClearAllModulePoints(System.Object,System.EventArgs)">
            <summary>
            Handles the "Clear all points" button:
            unselects all points for the displayed module.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnModuleRowEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Handles the RowEnter event on the Modules grid.
            Changes the CurrentModule and populates the ModulePoints grid accordingly.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnModuleCellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Handles the CellContentClick and CellContentDoubleClick events 
            on a Select cell of the Modules grid:
            (un)selects the Module accordingly.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnSelectAllGroups(System.Object,System.EventArgs)">
            <summary>
            Handles the "Select all groups" button:
            selects all groups (doesn't change each log point's individual selection).
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnClearAllGroups(System.Object,System.EventArgs)">
            <summary>
            Handles the "Clear all groups" button:
            unselects all groups (doesn't change each log point's individual selection).
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnOverallPriorityChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the SelectedIndex event on the Priority combo box.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnSelectAllSubgroups(System.Object,System.EventArgs)">
            <summary>
            Handles the "Select all subroups" button:
            selects all subgroups for the displayed group.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnClearAllSubgroups(System.Object,System.EventArgs)">
            <summary>
            Handles the "Clear all points" button:
            unselects all points for the displayed group.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">No event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnGroupRowEnter(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Handles the RowEnter event on the Groups grid.
            Changes the CurrentGroup and populates the SubGroups grid accordingly.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnGroupCellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Handles the CellValueChanged event on the Groups grid:
            if the cell is Priority, apply it.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.OnSubgroupCellContentClick(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Handles the CellContentClick and CellContentDoubleClick events 
            on a Select cell of the Subgroups grid:
            (un)selects the Subgroup accordingly.
            </summary>
            <param name="sender">Sender control.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.SelectedLogIds">
            <summary>
            The LogIds finally selected.
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.LogPointInfo">
            <summary>
            Information on a LogPoint: retrieved from Silox database.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.LogPointInfo.groupSeparators">
            <summary>
            Separators to split groups from the MDFLOGID field.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.LogPointInfo.Selected">
            <summary>
            Is the log point selected in the filter.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.LogPointInfo.#ctor(System.Xml.XmlNode,HslDecoder.FormFilterConfiguration.GroupDef)">
            <summary>
            Constructor from XML node.
            </summary>
            <param name="node">XML node.</param>
            <param name="groupDef">Context Group definitions (can be null).</param>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.ID">
            <summary>
            Log ID.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.Type">
            <summary>
            Type of log point.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.RootName">
            <summary>
            Root name.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.Indent">
            <summary>
            Indent type if there is a root name.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.InFmt">
            <summary>
            Format string.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.Module">
            <summary>
            Originating module.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.LineNo">
            <summary>
            Line number in the module.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.Group">
            <summary>
            Group this point belongs to (can be null).
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.Subgroup">
            <summary>
            Subgroup this point belongs to (can be null).
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.LogPointInfo.Priority">
            <summary>
            Specified priority for this point (can be int.MaxValue).
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.LogPair">
            <summary>
            This class represents a set of twinned Start/End log points.
            The property in common is Root name.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.LogPair.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="a_root"></param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.LogPair.AddLogId(HslDecoder.FormFilterConfiguration.LogPointInfo)">
            <summary>
            Adds the given LogPoint info to the Start or End list.
            </summary>
            <param name="a_info">LogPointInfo to add.</param>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.ModuleInfo">
            <summary>
            Information on a module: list of the LogPoints it contains.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.ModuleInfo.Selected">
            <summary>
            Is module globally selected.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.ModuleInfo.#ctor(System.String)">
            <summary>
            Constructor with name.
            </summary>
            <param name="a_name"></param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.ModuleInfo.AddLogPoint(HslDecoder.FormFilterConfiguration.LogPointInfo)">
            <summary>
            Add a point to the module's list.
            </summary>
            <param name="a_lpi">LogPoint to add.</param>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.ModuleInfo.Name">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.ModuleInfo.LogPoints">
            <summary>
            Log Points defined by the module.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.ModuleInfo.NbSelectedPoints">
            <summary>
            Computes how many points are selected in the module.
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.Property">
            <summary>
            Base class for properties: Group, Subgroup, Priority.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Property.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Property.logPoints">
            <summary>
            List of LogPoints with this property.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Property.#ctor(System.String)">
            <summary>
            Constructor from name.
            </summary>
            <param name="a_name"></param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Property.AddLogPoint(HslDecoder.FormFilterConfiguration.LogPointInfo)">
            <summary>
            Adds given LogPoint to the list.
            </summary>
            <param name="lpi">LogPoint information.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Property.Select(System.Boolean)">
            <summary>
            (Un)selects all the LogPoints in this group.
            </summary>
            <param name="bSelect"></param>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.Property.IsEmpty">
            <summary>
            Is this property empty? (i.e. does it contain points).
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.Priority">
            <summary>
            Definition of a Priority.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Priority.Level">
            <summary>
            Priority level.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Priority.Subgroups">
            <summary>
            Subgroups with this priority.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Priority.#ctor(System.String,System.Int32)">
            <summary>
            Constructor from Name and level.
            </summary>
            <param name="a_name">Name.</param>
            <param name="a_level">Priority level.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Priority.AddSubgroup(HslDecoder.FormFilterConfiguration.Subgroup)">
            <summary>
            Adds given subgroup to the list.
            </summary>
            <param name="a_sub">Subgroup to add.</param>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.Group">
            <summary>
            Definition of a Group.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Group.Subgroups">
            <summary>
            Subgroups.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Group.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="a_name">Group name.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Group.SetPriority(System.Int32)">
            <summary>
            Sets the active priority for this Group:
            selects all LogPoints whose priority is smaller than or equal to given level.
            </summary>
            <param name="level">Priority level.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Group.GetActivePriority">
            <summary>
            Computes the active priority from all LogPoints.
            </summary>
            <returns>Highest represented priority level.</returns>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Group.GetActivePriority(System.Boolean@)">
            <summary>
            Computes the active priority from all LogPoints
            and checks whether it's consistent.
            </summary>
            <returns>Highest represented priority level.</returns>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Group.Consolidate">
            <summary>
            Computes the available priority levels for this Group.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.Group.Priorities">
            <summary>
            The used priority levels (corresponding to all included LogPoints).
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.Subgroup">
            <summary>
            Definition of a Subgroup.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.Subgroup.Priority">
            <summary>
            The priority level.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.Subgroup.#ctor(HslDecoder.FormFilterConfiguration.Group,System.String,System.Int32)">
            <summary>
            Constructor from name, priority level, and parent.
            </summary>
            <param name="a_parent">Parent group.</param>
            <param name="a_name">Name.</param>
            <param name="a_prio">Priority level.</param>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.Subgroup.ParentGroup">
            <summary>
            Parent group.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.Subgroup.IsSelected">
            <summary>
            Is this Subgroup selected.
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.GroupDef">
            <summary>
            Group definitions.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.GroupDef.PrioritiesByName">
            <summary>
            Priorities by name.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.GroupDef.PrioritiesByValue">
            <summary>
            Priorities by value.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.GroupDef.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.GroupDef.#ctor(System.String)">
            <summary>
            Constructor from XML file.
            </summary>
            <param name="strFilePath">Path of the file.</param>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.GroupDef.Consolidate">
            <summary>
            Consolidates the Group definitions:
            removes all empty groups / subgroups.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.GroupDef.FindProperty(System.String)">
            <summary>
            Finds the Property with given name.
            </summary>
            <param name="a_name">Name to search for.</param>
            <returns>Corresponding property: either Priority, Group, or Subgroup.</returns>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.GroupDef.Groups">
            <summary>
            Groups by name.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.GroupDef.Subgroups">
            <summary>
            Subgroups by name.
            </summary>
        </member>
        <member name="P:HslDecoder.FormFilterConfiguration.GroupDef.MaxPriority">
            <summary>
            Maximum priority level.
            </summary>
        </member>
        <member name="T:HslDecoder.FormFilterConfiguration.FilterConfiguration">
            <summary>
            Serialization filter configuration.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.FilterConfiguration.xml">
            <summary>
            The serializer.
            </summary>
        </member>
        <member name="F:HslDecoder.FormFilterConfiguration.FilterConfiguration.LogIds">
            <summary>
            Selected LogIds.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.FilterConfiguration.#ctor">
            <summary>
            Default constructor for deserialization.
            </summary>
        </member>
        <member name="M:HslDecoder.FormFilterConfiguration.FilterConfiguration.#ctor(System.UInt32[])">
            <summary>
            Constructor with parameters.
            </summary>
            <param name="a_logIds">LogIds.</param>
        </member>
        <member name="T:HslDecoder.HslsConfigFile">
            <summary>
            Represents *.hslcfg XML file
            </summary>
        </member>
        <member name="M:HslDecoder.HslsConfigFile.Load(System.String)">
            <summary>
            Loads HSLCFG file
            </summary>
        </member>
        <member name="M:HslDecoder.HslsConfigFile.GetSiloFilePath">
            <summary>
            Gets a path to SILO file specified in HSLCFG file (can return empty string if nothing is specified)
            </summary>
        </member>
        <member name="M:HslDecoder.HslsConfigFile.GetRawLobFilePath">
            <summary>
            Gets a path to RAW lob file specified in HSLCFG file.
            </summary>
            <returns>null if field rawLobFile is not present.</returns>
        </member>
        <member name="M:HslDecoder.HslsConfigFile.GetSiloFileFragments">
            <summary>
            Gets list of binnary (lobfrag) file fragments specified in SILO file.
            </summary>
        </member>
        <member name="M:HslDecoder.HslsConfigFile.GetSoxFilePath">
            <summary>
            Gets a path to SOX decoder database file specified in HSLCFG file.
            </summary>
        </member>
        <member name="M:HslDecoder.HslsConfigFile.GetHslsTplgsm">
            <summary>
            Gets a value of TPLGSM variable specified in HSLCFG file.
            </summary>
        </member>
        <member name="T:HslDecoder.SoxDecoderDb">
            <summary>
            Allows to load and query SOX decoder database files
            </summary>
        </member>
        <member name="F:HslDecoder.SoxDecoderDb._allLogPointIds">
            <summary>
            Log point ID to XML node
            </summary>
        </member>
        <member name="F:HslDecoder.SoxDecoderDb._lpNameToIdsCache">
            <summary>
            This is a cache to speed up LP name -> IDs lockup
            </summary>
        </member>
        <member name="F:HslDecoder.SoxDecoderDb._lpModuleToIdsCache">
            <summary>
            This is a cache to speed up LP module name -> IDs lockup
            </summary>
        </member>
        <member name="F:HslDecoder.SoxDecoderDb._decoderDbWarnings">
            <summary>
            This will contain all (none crtitical) warnings when found in decoder database
            </summary>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="soxFilePath">full path to decoder database file to load</param>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.IsLpPresentInDB(System.Int32)">
            <summary>
            Checks if specified log point Id is in present
            </summary>
        </member>
        <member name="F:HslDecoder.SoxDecoderDb._lastInstance">
            <summary>
            Multiple addins will want to have an access to the same SOX file
            Instead of loading XML multiple times, we will keep the last instance in this object
            </summary>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.GetLogPointDescription(System.Int32)">
            <summary>
            Retrives description for specified log point
            </summary>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.GetFilter(System.String)">
            <summary>
            Parses SOX file and loads HSL group filter information
            </summary>
            <param name="soxFilePath">The sox file path.</param>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.GetLogPointIdsFromName(System.String)">
            <summary>
            Retrieves the list of corresponding IDs from a LogPoint name.
            </summary>
            <param name="a_strLpName">Log point name.</param>
            <returns>array of log points, exception on error or if not found.</returns>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.GetAllLogPointsForModule(System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Gets a list of log point IDs for specified module
            </summary>
        </member>
        <member name="M:HslDecoder.SoxDecoderDb.GetAllLogPoints">
            <summary>
            Specifies list of all log points present in DB
            </summary>
        </member>
        <member name="P:HslDecoder.SoxDecoderDb.FilePath">
            <summary>
            Gets the file path of the SOX file.
            </summary>
        </member>
        <member name="P:HslDecoder.SoxDecoderDb.Warnings">
            <summary>
            This will contain all (none crtitical) warnings when found in decoder database
            </summary>
        </member>
        <member name="T:HslDecoder.IHslConfigurationWrapper">
            <summary>
            This class is used to give users of SharpHSL an access to IHslFilter interface 
            without exposing raw com object
            
            IMPORTANT NOTICE: you don't need to call:
            System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
            </summary>
        </member>
        <member name="F:HslDecoder.IHslConfigurationWrapper.SoxName">
            <summary>
            Name of the Silox database.
            </summary>
        </member>
        <member name="F:HslDecoder.IHslConfigurationWrapper.FloxName">
            <summary>
            Name of the Flogger transform file.
            </summary>
        </member>
        <member name="F:HslDecoder.IHslConfigurationWrapper.EmptySiloName">
            <summary>
            Name of a Silo file that contains no .lobfrag.
            </summary>
        </member>
        <member name="F:HslDecoder.IHslConfigurationWrapper.DefaultSoxSubFolder">
            <summary>
            Relative location of the default Silox database.
            </summary>
        </member>
        <member name="F:HslDecoder.IHslConfigurationWrapper.PathOfHslcfg">
            <summary>
            Relative keyword to use in the .hslcfg file.
            </summary>
        </member>
        <member name="F:HslDecoder.IHslConfigurationWrapper.HslsTpgsm">
            <summary>
            Relative keyword to use in the .hslcfg file.
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.GetOption(HslServerLibrary.HslConfigOption)">
            <summary>
            Gets value of config option
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.InitializeFromFile(System.String)">
            <summary>
            Initializes config object from specified HSLSCFG file
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.InitializeWithGuiSettings">
            <summary>
            Initializes config object from current GUI settings
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.ResetToDefault">
            <summary>
            Resets config to default
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.Save">
            <summary>
            Saves config
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.SaveAs(System.String)">
            <summary>
            Saves config as specified file
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.SaveToTempFile">
            <summary>
            Saves config to temp file
            </summary>
            <returns>temp file path</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.SetOption(HslServerLibrary.HslConfigOption,System.Object)">
            <summary>
            Sets config option
            </summary>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.ReplaceKeywords(System.String,System.String,System.String)">
            <summary>
            Replaces keywords with their equivalents in a path
            (%TPLGSM%, %MTOOLS%, %HSLS_TPLGSM%, %PATH_OF_HSLCFG%)
            </summary>
            <param name="a_input">Input path.</param>
            <param name="a_mtools">MTOOLS.</param>
            <param name="a_hslcfg">Location of .hslcfg file.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.CreateT1ReplayHslCfgFile(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a default .hslcfg file, for replay or just deserialization.
            Also creates dummy .silo if needed.
            </summary>
            <remarks>This function handles T1 configuration only!</remarks>
            <param name="a_strHslCfgFile">Path of hslcfg file to create.</param>
            <param name="a_strTplgsm">%TPLGSM% variable.</param>
            <param name="a_strSoxFile">Path to indicate as DecoderDatabase; if null, default T1 path will be used.</param>
            <param name="a_strSiloFile">Path to indicate as .silo file for replay; if null, dummy file will be created.</param>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.CreateT1ReplaySiloFile(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a .silo file for replay, referring given .lobfrag list.
            <remarks>This function handles T1 configuration only!</remarks>
            </summary>
            <param name="a_siloPath">Path for the .silo file.</param>
            <param name="a_lobFrags">List of .lobfrag files to refer.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.CreateDecodeHslcfgFile(System.String,System.String,System.String)">
            <summary>
            Creates a .hslcfg file and its dependencies for decoding.
            Uses properties from the original file, modifying some of them:
            <para>- LOB file (.silo): set to local, with name = EmptySiloName" and no contents.</para>
            <para>- DecoderDatabase: set to local.</para>
            <para>- Tplgsm</para>
            Also copies:
            <para>- the .sox file (with its dependencies resolved).</para>
            <para>- the .flox file.</para>
            <para>- the .silo file (with contents set to no .lobfrag).</para>
            </summary>
            <param name="a_fromFile">Original file path.</param>
            <param name="a_toFile">Target file path.</param>
            <param name="a_mtools">Value of %MTOOLS%.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.CopySoxAndFloxFiles(System.String,System.String,System.String)">
            <summary>
            Copy .sox and .flox file from one folder to another.
            Dependency files are directly included in the target file.
            </summary>
            <param name="a_soxFile">Original SoxFile path.</param>
            <param name="a_toDir">Target directory.</param>
            <param name="a_mtools">Value of %MTOOLS%.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.CopyFileAndDepends(System.String,System.String,System.String)">
            <summary>
            Copy the given XML (.sox or .flox) to another location.
            Dependency files are directly included in the target file.
            </summary>
            <param name="a_fromFile">Original file path.</param>
            <param name="a_toFile">Target file path.</param>
            <param name="a_mtools">Value of %MTOOLS%.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.CreateEmptySiloFile(System.String,System.String)">
            <summary>
            Copies the given .silo file to another location,
            omitting all the &lt;lobFile&gt; nodes.
            </summary>
            <param name="a_fromFile">Original file path.</param>
            <param name="a_toFile">Target file path.</param>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.GetSiloDbFilePath(System.String,System.String)">
            <summary>
            Retrieves the path of the Silox database (.sox) from given .hslcfg file.
            </summary>
            <param name="a_hslcfgFile">Path of .hslcfg file.</param>
            <param name="a_mtools">Value of %MTOOLS%.</param>
            <returns>Path of Silox database.</returns>
        </member>
        <member name="M:HslDecoder.IHslConfigurationWrapper.ReadApplicationFilter(System.String,System.String,System.Collections.Generic.List{System.UInt32}@,System.Boolean[0:,0:]@)">
            <summary>
            Reads the ApplicationFilter from given .hslcfg file
            and retrieves the list of enabled LogPoints and enabled property on each ITR.
            </summary>
            <param name="a_hslcfgFile">Path of .hslcfg file.</param>
            <param name="a_mtools">Value of %MTOOLS%.</param>
            <param name="a_logPoints">List of enabled logIds, including TimerWrap and TcuEvent if applicable.</param>
            <param name="a_itrEnabled">Enabled property for each ITR on each stream.</param>
        </member>
        <member name="P:HslDecoder.IHslConfigurationWrapper.Dirty">
            <summary>
            Check if configuration is modified
            </summary>
        </member>
        <member name="T:HslDecoder.HslFilterSettings">
            <summary>
            Class that represents HSL filter settings
            </summary>
        </member>
        <member name="F:HslDecoder.HslFilterSettings.filterMode">
            <summary>
            Filtering mode
            </summary>
        </member>
        <member name="F:HslDecoder.HslFilterSettings.logPoints">
            <summary>
            List of log points in a filter
            </summary>
        </member>
        <member name="F:HslDecoder.HslFilterSettings.specialTypesMask">
            <summary>
            Mask of special types
            </summary>
        </member>
        <member name="F:HslDecoder.HslFilterSettings.dataPipes">
            <summary>
            Table of ITR data types
            </summary>
        </member>
        <member name="M:HslDecoder.HslFilterSettings.IsEnabled">
            <summary>
            Specifies if filter is enabled
            </summary>
        </member>
        <member name="M:HslDecoder.HslFilterSettings.IsExtraMaskEnabled(HslServerLibrary.HslFilterExtraTypes)">
            <summary>
            Checks if extra mask is enabled
            </summary>
        </member>
        <member name="M:HslDecoder.HslFilterSettings.IsLpPresent(System.Int32)">
            <summary>
            Checks if specified log point ID is in a filter
            </summary>
        </member>
        <member name="T:HslDecoder.IHslFilterWrapper">
            <summary>
            This class is used to give users of SharpHSL an access to IHslFilter interface 
            without exposing raw com object
            
            IMPORTANT NOTICE: you don't need to call:
            System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.AddDataPipe(System.Int32,System.Int32)">
            <summary>
            Adds ITR data pipe to filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.AddExtraType(HslServerLibrary.HslFilterExtraTypes)">
            <summary>
            Adds etra type to filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.AddLogPointId(System.Int32)">
            <summary>
            Adds log point to filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.AddLogPointName(System.String)">
            <summary>
            Adds log point to filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.AddModule(System.String)">
            <summary>
            Adds log points from specified module to filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.ClearDataPipes">
            <summary>
            Clears data pipes from filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.ClearFilter(System.Boolean)">
            <summary>
            Clears filter
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.EnableFilter(HslServerLibrary.FilterMode)">
            <summary>
            Enables/disables filter
            </summary>
            <param name="a_eFilterMode"></param>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.GetCurrentSettings(HslDecoder.HslFilterSettings@)">
            <summary>
            Get current settings in client filter directly from HSLS
            </summary>
        </member>
        <member name="M:HslDecoder.IHslFilterWrapper.InitWithDefaultFilter(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Copies default filter from HSLS into application filter.
            </summary>
        </member>
        <member name="T:HslDecoder.IHslServerWrapper">
            <summary>
            This class is used to give users of SharpHSL an access to IHslServer interface 
            without exposing raw com object (especialy raw COM pointers like: HslConfiguration and HslFilter)
            
            IMPORTANT NOTICE: you don't need to call:
            System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetEventLogMessages(System.Int32)">
            <summary>
            Gets a list of messages collected in HSLS GUI
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetFormatedStringForLP(System.Array)">
            <summary>
            Performs an action simmilar to flogger.exe. Converts raw log point into text
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetLogPointDescription(System.Int32)">
            <summary>
            Returns an XML description of Log Point from SILOX database
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetLogPointModules">
            <summary>
            Gets list of all modules from SILOX databse
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetLogPointsForModule(System.String)">
            <summary>
            Returns list of log points for specified module name
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetOption(System.String)">
            <summary>
            Returns value of HSLS run time option (see HSLS doc for more details)
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetStreamingMode(HslServerLibrary.StreamingMode@,System.Int32@)">
            <summary>
            Retrives streaming mode details
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.InitializeConnection(System.String)">
            <summary>
            Establishes connection to HSLS
            </summary>
            <param name="a_bstrHslConfigPath">Path to HSLS configuration file to load</param>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.LoadSiloFile(System.String,System.Boolean)">
            <summary>
            Loads SILO file for replay
            </summary>
            <param name="a_bstrSiloFile">Path to SILO file</param>
            <param name="a_bAutoStartStreaming">if true - streaming will be automaticaly started</param>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.PoolForLogPoints(System.Int32)">
            <summary>
            Returns an array of log points in pooling mode
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.ReplayAcquiredData">
            <summary>
            Used by flogger to replay data after acquistion is stopped.
            NOTE: ReplayAcquiredData can be used only when one client is connected to HSLS
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.SaveAcquiredFiles(System.String)">
            <summary>
            Saves acquired files into *.SPACK file
            </summary>
            <param name="a_bstrPackagePath">Path of SPACK file to create</param>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.SeekToPosition(HslServerLibrary.HslStreamPos,System.Int32)">
            <summary>
            Moves streaming pointer
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.SetOption(System.String,System.Object)">
            <summary>
            Sets a value of HSLS run time option (see HSLS doc for more details)
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.SetStreamingMode(HslServerLibrary.StreamingMode,System.Int32)">
            <summary>
            Sets streaming mode
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.StartAcquisition(System.Boolean,System.Boolean,System.String@)">
            <summary>
            Starts acquisition
            </summary>
            <param name="a_bAutoStartStreaming">if true - streaming will also be started</param>
            <param name="a_bIgnoreForLobPlaybacks">if true and current profile is a replay type - this command will be ignored</param>
            <param name="a_pSiloPath">returns a path to silo file beign created</param>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.StartStreaming">
            <summary>
            Starts streaming of acquired data
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.StopAcquisition">
            <summary>
            Stops acquisition
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.StopStreaming">
            <summary>
            Stops streaming of acquired data
            </summary>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.SendData(System.SByte[])">
            <summary>
            Valid only if you're connected to acquisition hardware that supports bi-directional communication.
            </summary>
            <param name="dataToSend">Data to send</param>
        </member>
        <member name="M:HslDecoder.IHslServerWrapper.GetLogPointIdsFromName(System.String)">
            <summary>
            Returns list of log points for specified log point name
            </summary>
        </member>
        <member name="P:HslDecoder.IHslServerWrapper.HslConfiguration">
            <summary>
            Returns an HSLS Configuration interface
            
            IMPORTANT NOTICE: you don't need to call:
            System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
            </summary>
        </member>
        <member name="P:HslDecoder.IHslServerWrapper.HslFilter">
            <summary>
            Returns an HSLS Filter interface
            
            IMPORTANT NOTICE: you don't need to call:
            System.Runtime.InteropServices.Marshal.ReleaseComObject(); on this object
            </summary>
        </member>
        <member name="P:HslDecoder.IHslServerWrapper.LobFileSize">
            <summary>
            Returns size of binnary HSL data file
            </summary>
        </member>
        <member name="P:HslDecoder.IHslServerWrapper.LogPointsPerEventCount">
            <summary>
            Specifies number of log points delivered by one callback
            </summary>
        </member>
        <member name="P:HslDecoder.IHslServerWrapper.StreamingPosition">
            <summary>
            Specifies streaming position in SILO file
            </summary>
        </member>
        <member name="M:HslDecoder.IDynamicLpData.Serialize">
            <summary>
            Reconstruct raw binary data of this log point
            Can be used to serialize and store content of log point
            
            Output format is:
            first 2 bytes: timer wrap count for this log point
            remaning bytes: log point in SILO binary format (see Hslv2.chm for details of this format)
            </summary>
            <returns>array of bytes containing serialized log point</returns>
        </member>
        <member name="P:HslDecoder.IDynamicLpData.GetTickCount">
            <summary>
            Gives log point timestamp and inserted in the stream by the Bandsaw/hacksaw 
            acquisition hardware.
            </summary>
        </member>
        <member name="P:HslDecoder.IDynamicLpData.StreamIndex">
            <summary>
            Index value of the stream on which this log point  was received.
            </summary>
        </member>
        <member name="P:HslDecoder.IDynamicLpData.IndentLevel">
            <summary>
            Specifies at which indent level the log point was received. Each START
            log point will increase the indent level by 1 for each subsequent log point
            until an END log point is received, and it is decremented.
            </summary>
        </member>
        <member name="T:HslDecoder.LogPoint">
            <summary>
            Main class that represent log points
            Use "V" property to access values
            Use "A" property if log point is an array
            If Log Point is a Timer (previously known as Tcu) event - cast TimerEvent type to get it
            </summary>
        </member>
        <member name="F:HslDecoder.LogPoint.Properties">
            <summary>
            This gives access to all the static properties of the log point
            i.e. Those properties which are the same for all log points of a given
            log point ID.
            </summary>
        </member>
        <member name="F:HslDecoder.LogPoint.V">
            <summary>
            Collection of 'printf' variables; Use member A if log point is an 'array' type. 
            </summary>
        </member>
        <member name="F:HslDecoder.LogPoint.A">
            <summary>
            'Array' type variable; Use member V[] if log point is a 'printf' type.
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.#ctor(HslDecoder.SharpHsl.LogPointStore,HslDecoder.StreamIndex,System.UInt64,System.UInt16)">
            <summary>
            This constructor is used for single message log points
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.#ctor(HslDecoder.SharpHsl.LogPointStore,HslDecoder.StreamIndex,System.UInt64,System.UInt32,System.UInt16[],System.UInt16)">
            <summary>
            This constructor is used when handling multi-message array log points.
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.#ctor(HslDecoder.SharpHsl.LogPointStore,HslDecoder.StreamIndex,System.UInt64,System.UInt16[],System.UInt16)">
            <summary>
            This constructor is used when handling multi-message log point (not array and not single message)
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.#ctor(HslDecoder.SharpHsl.LogPointStore,HslDecoder.StreamIndex,System.UInt64,System.UInt16[],System.UInt16,System.Int64)">
            <summary>
            This constructor is used when handling multi-message log point (not array and not single message)
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.#ctor(HslDecoder.SharpHsl.LogPointStore,HslDecoder.StreamIndex,System.UInt64,System.UInt16[])">
            <summary>
            This constructor is used as base class constructor for TimerEvent log points.
            </summary>
        </member>
        <member name="F:HslDecoder.LogPoint._localTime">
            <summary>
            this is the time save the log ,may not very precise
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.Serialize">
            <summary>
            Reconstruct raw binary data of this log point
            Can be used to serialize and store content of log point
            
            Output format is:
            first 2 bytes: timer wrap count for this log point
            remaning bytes: log point in SILO binary format (see Hslv2.chm for details of this format)
            </summary>
            <returns>array of bytes containing serialized log point</returns>
        </member>
        <member name="M:HslDecoder.LogPoint.GetHumanTimestamp">
            <summary>
            Provides the timestamp as a double value; Unit is seconds.
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:HslDecoder.LogPoint.GetLocalTime">
            <summary>
            get local time
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslDecoder.LogPoint.GetTargetTimeFrame">
            <summary>
            Returns the timestamp according the to the target's time framework (qbits, chips...)
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.GetLofOutput(System.Boolean,System.Boolean)">
            <summary>
            Returns the full string representation of the log point.
            </summary>
            <param name="noExceptions">On exception, returns text of the exception if value is true</param>
            <param name="noNewLines">When true and formating string contains news lines - those will be flattened by replacing those with coma character</param>
        </member>
        <member name="M:HslDecoder.LogPoint.GetLofOutput(System.Boolean)">
            <summary>
            Returns the full string representation of the log point.
            </summary>
            <param name="noExceptions">On exception, returns text of the exception if value is true</param>
        </member>
        <member name="M:HslDecoder.LogPoint.GetLofOutput">
            <summary>
            Returns the full string representation of the log point.
            </summary>
        </member>
        <member name="M:HslDecoder.LogPoint.ToString">
            <summary>
            Will return the same content as GetLofOutput()
            </summary>
            <returns>Returns the full string representation of the log point.</returns>
        </member>
        <member name="M:HslDecoder.LogPoint.GetRawData">
            <summary>
            Returns the LogPoint's raw data.
            </summary>
            <returns>The raw data.</returns>
        </member>
        <member name="P:HslDecoder.LogPoint.GetTickCount">
            <summary>
            Number of ticks according to timestamp inserted by acquisition hardware.
            This number of ticks takes into account the number of timerwraps that 
            have been received.
            </summary>
        </member>
        <member name="P:HslDecoder.LogPoint.StreamIndex">
            <summary>
            Stream index number on which this log point was received
            </summary>
        </member>
        <member name="P:HslDecoder.LogPoint.IndentLevel">
            <summary>
            This gives the indentation level for this log point. Indentation is controlled by 
            how many Start/End log points are received.
            </summary>
        </member>
        <member name="P:HslDecoder.LogPoint.LocalTime">
            <summary>
            used for local time
            </summary>
        </member>
        <member name="P:HslDecoder.LogPoint.SleepTicks">
            <summary>
            sleep ticks
            </summary>
        </member>
        <member name="T:HslDecoder.InvalidBaseLogPointConstruct">
            <summary>
            Invalid Base Log Point Construct Exception
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointSerializer.SERIALIZE_TAIL_BYTES">
            <summary>
            Number of "tail" bytes in a serialized LogPoint:
            These bytes should not be output to a .silo file.
            </summary>
        </member>
        <member name="M:HslDecoder.LogPointSerializer.SerializeSimpleLogPoint(HslDecoder.LogPoint)">
            <summary>
            Serializes a simple log point (contains no payload)
            </summary>
        </member>
        <member name="M:HslDecoder.LogPointSerializer.SerializeArrayLogPoint(HslDecoder.LogPoint)">
            <summary>
            Serializes an array into variable len SILO log point
            </summary>
        </member>
        <member name="M:HslDecoder.LogPointSerializer.SerializeLogPoint(HslDecoder.LogPoint)">
            <summary>
            Serializes a simple log point (contains var len payload)
            </summary>
        </member>
        <member name="M:HslDecoder.LogPointSerializer.SerializeTimerWrap(HslDecoder.LogPoint)">
            <summary>
            Serializes a timer wrap
            No indentation level is applicable to a TimerWrap but it is still included in 
            the serialisation to keep the same generic code during de-serialisation.
            </summary>
        </member>
        <member name="T:HslDecoder.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HslDecoder.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HslDecoder.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:HslDecoder.SelectModulesForm">
            <summary>
            This form allows to edit list of modules and log points for application filter.
            </summary>
        </member>
        <member name="F:HslDecoder.SelectModulesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslDecoder.SelectModulesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslDecoder.SelectModulesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:HslDecoder.SelectModulesForm.ListViewColumnSorter.ColumnToSort">
            <summary>
            Specifies the column to be sorted
            </summary>
        </member>
        <member name="F:HslDecoder.SelectModulesForm.ListViewColumnSorter.OrderOfSort">
            <summary>
            Specifies the order in which to sort (i.e. 'Ascending').
            </summary>
        </member>
        <member name="F:HslDecoder.SelectModulesForm.ListViewColumnSorter.ObjectCompare">
            <summary>
            Case insensitive comparer object
            </summary>
        </member>
        <member name="M:HslDecoder.SelectModulesForm.ListViewColumnSorter.#ctor(HslDecoder.SelectModulesForm.ListViewColumnSorter.ColumnType[])">
            <summary>
            Class constructor.  Initializes various elements
            </summary>
        </member>
        <member name="M:HslDecoder.SelectModulesForm.ListViewColumnSorter.Compare(System.Object,System.Object)">
            <summary>
            This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
            </summary>
            <param name="x">First object to be compared</param>
            <param name="y">Second object to be compared</param>
            <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
        </member>
        <member name="P:HslDecoder.SelectModulesForm.ListViewColumnSorter.SortColumn">
            <summary>
            Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').
            </summary>
        </member>
        <member name="P:HslDecoder.SelectModulesForm.ListViewColumnSorter.Order">
            <summary>
            Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').
            </summary>
        </member>
        <member name="T:HslDecoder.OnNewLogPointsEventType">
            <summary>
            This delegate will pass the populated HSLS log points to the GUI thread.
            </summary>
            <param name="batchEvent"></param>
        </member>
        <member name="T:HslDecoder.OnNewInfoMessage">
            <summary>
            This delegate will be used to inform the user of HSL messages.
            </summary>
            <param name="msgEvent"></param>
        </member>
        <member name="T:HslDecoder.ConnectionType">
            <summary>
            Specifies if SharpHSL should or should not connect to HSLS
            </summary>
        </member>
        <member name="F:HslDecoder.ConnectionType.ConnectToHsls">
            <summary>
            This is a default option.
            SharpHSL each time will establish connection to HSLS.
            In this mode you can do everything that HSL framework allows:
            - acquisition of data
            - streaming of live data (as it comes)
            - streaming of pre-recorded data (SILO files)
            - serialization and deserialization of log points
            </summary>
        </member>
        <member name="F:HslDecoder.ConnectionType.DoNotConnectToHsls">
            <summary>
            SharpHSL will NOT connect to HSLS.
            This option has a benefit of your application being fully stand-alone.
            But features you can use are limited to:
            - streaming of pre-recorded data (SILO files)
            - serialization and deserialization of log points
            </summary>
        </member>
        <member name="T:HslDecoder.HslMsgType">
            <summary>
            Message type (severity) level
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.Fatal">
            <summary>
            Notifies about internal fatal errors of component
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.Error">
            <summary>
            Notifies about errors
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.Warning">
            <summary>
            Notifies about warnings
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.StateUpdate">
            <summary>
            Notifies about state changes in HSLS
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.UserException">
            <summary>
            No longer used
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.TargetException">
            <summary>
            Assert of EVB was detected
            </summary>
        </member>
        <member name="F:HslDecoder.HslMsgType.Unknown">
            <summary>
            No longer used
            </summary>
        </member>
        <member name="T:HslDecoder.HslsNotifyCode">
            <summary>
            This enumeration is almost identical to NotifyCode enumeration of HSLS
            We re-declare it here not to expose raw COM types
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.MiscAqError">
            <summary>
            not implemented yet
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.NewClientAttached">
            <summary>
            not implemented yet
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.ClientDetatched">
            <summary>
            not implemented yet
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.DiskFileAlmostFull">
            <summary>
            not implemented yet
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.AqStarted">
            <summary>
            not implemented yet
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.AqCompleted">
            <summary>
            Fired when acquisition stops.
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.StreamingStarted">
            <summary>
            Fired on start of data streaming for client application.
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.StreamingFinished">
            <summary>
            Fired on end of data streaming for client application.
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.FragmentStreamingStarted">
            <summary>
            Fired to indicate beginning of streaming of new SILO file fragment.
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.FragmentStreamingFinished">
            <summary>
            Fired to indicate end of streaming of new SILO file fragment.
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.MiscStreamingError">
            <summary>
            Fired when streaming thread encounters a fatal error.
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.AssertionDetected">
            <summary>
            Fired when assert log point is detected on EVB. Will happen only if "Assert Detection" is enabled in HSLS.
            This message type is generated internally by SharpHSL and is not one of HSLS COM types
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.LogClosing">
            <summary>
            Fired when HSL log is closing. Currently raised only by the TeraHsl (Genie)
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.LogClosed">
            <summary>
            Fired when HSL log is closed. Currently raised only by the TeraHsl (Genie)
            </summary>
        </member>
        <member name="F:HslDecoder.HslsNotifyCode.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="T:HslDecoder.LogPointHide">
            <summary>
            Describes visibility status of log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointHide.ENABLED">
            <summary>
            This attribute marks some log points as 'hidden' when these
            are special log points required for the operation of HSL.
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointHide.DISABLED">
            <summary>
            Log point is not hidden
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointHide.ADVANCED">
            <summary>
            Log point is part of HSLS advanced log points tab
            </summary>
        </member>
        <member name="T:HslDecoder.IndentType">
            <summary>
            Indicates whether this log point is used for indentation or not.
            </summary>
        </member>
        <member name="F:HslDecoder.IndentType.START">
            <summary>
            Log point is a START of new level of indentation
            </summary>
        </member>
        <member name="F:HslDecoder.IndentType.END">
            <summary>
            Log point is a END of current level of indentation
            </summary>
        </member>
        <member name="F:HslDecoder.IndentType.NONE">
            <summary>
            Log point does not control indentation
            </summary>
        </member>
        <member name="T:HslDecoder.LogPointType">
            <summary>
            Type of log point message
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.PRINTF">
            <summary>
            Printf type log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.ARRAY16">
            <summary>
            Array16 type log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.ARRAY32">
            <summary>
            Array32 type log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.ARRAYPACKED">
            <summary>
            Array Packed type log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.ARRAYCMPLXCIRC">
            <summary>
            ARRAYCMPLXCIRC type log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.ARRAY16CIRC">
            <summary>
            ARRAY16CIRC type log point
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.TYPEDEF">
            <summary>
            TYPEDEF type log point. This is used when
            M_FrHslTypedef() macro is used. It is dedicated
            for the logging of an instance of a C structure.
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.STRING">
            <summary>
            Array of bytes that should be interpreted as ASCII string.
            </summary>
        </member>
        <member name="F:HslDecoder.LogPointType.UNKNOWN">
            <summary>
            Unknown log point type
            </summary>
        </member>
        <member name="T:HslDecoder.VarJustificationType">
            <summary>
            Left or right justification
            </summary>
        </member>
        <member name="F:HslDecoder.VarJustificationType.RIGHT">
            <summary>
            Right justification
            </summary>
        </member>
        <member name="F:HslDecoder.VarJustificationType.LEFT">
            <summary>
            Left justification
            </summary>
        </member>
        <member name="T:HslDecoder.StreamIndex">
            <summary>
            Physical stream index (0 based)
            </summary>
        </member>
        <member name="F:HslDecoder.StreamIndex.STREAM_0">
            <summary>
            Stream (connector) 0
            </summary>
        </member>
        <member name="F:HslDecoder.StreamIndex.STREAM_1">
            <summary>
            Stream (connector) 1
            </summary>
        </member>
        <member name="F:HslDecoder.StreamIndex.STREAM_2">
            <summary>
            Stream (connector) 2
            </summary>
        </member>
        <member name="F:HslDecoder.StreamIndex.STREAM_3">
            <summary>
            Stream (connector) 3
            </summary>
        </member>
        <member name="T:HslDecoder.HslsStateType">
            <summary>
            Describes state of SharpHSL component
            </summary>
        </member>
        <member name="F:HslDecoder.HslsStateType.HS_NotConnectedToCOM">
            <summary>
            Not connected to HSLS
            </summary>
        </member>
        <member name="F:HslDecoder.HslsStateType.HS_ConnectedToCOM">
            <summary>
            Connected to HSLS via COM interface
            </summary>
        </member>
        <member name="F:HslDecoder.HslsStateType.HS_HslsInitialized">
            <summary>
            Connected to HSLS via COM interface and
            initialize connection called succesfully, HSLS ready for ACQ
            </summary>
        </member>
        <member name="F:HslDecoder.HslsStateType.HS_Unknown">
            <summary>
            Unknown state
            </summary>
        </member>
        <member name="T:HslDecoder.PlatformTypes">
            <summary>
            Platform type
            </summary>
        </member>
        <member name="F:HslDecoder.PlatformTypes.Starm9">
            <summary>
            Starm9
            </summary>
        </member>
        <member name="F:HslDecoder.PlatformTypes.Storm3">
            <summary>
            Storm3 3G platform
            </summary>
        </member>
        <member name="F:HslDecoder.PlatformTypes.Cam">
            <summary>
            CAM
            </summary>
        </member>
        <member name="F:HslDecoder.PlatformTypes.Common">
            <summary>
            COMMON
            </summary>
        </member>
        <member name="F:HslDecoder.PlatformTypes.T1">
            <summary>
            T1 modem
            Used for Draco, Capella and G1 platforms
            </summary>
        </member>
        <member name="F:HslDecoder.PlatformTypes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:HslDecoder.TimerEventTypes">
            <summary>
            Types of Timer events
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.BSI_GroupA">
            <summary>
            BSI_GroupA
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.BSI_GroupB">
            <summary>
            BSI_GroupB
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.BSI_GroupC">
            <summary>
            BSI_GroupC
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.RTT_SWI">
            <summary>
            RTT_SWI
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.RTT_GeneralStrobes">
            <summary>
            RTT_GeneralStrobes
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.RTT_WindowOff">
            <summary>
            RTT_WindowOff
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.RTT_WindowOn">
            <summary>
            RTT_WindowOn
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.RTT_IRQ">
            <summary>
            RTT_IRQ
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.BPI_GroupA">
            <summary>
            BPI_GroupA
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.BPI_GroupB">
            <summary>
            BPI_GroupB
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.EVDO_SWI">
            <summary>
            EVDO_SWI
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.EVDO_GeneralStrobes">
            <summary>
            EVDO_GeneralStrobes
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.EVDO_WindowOff">
            <summary>
            EVDO_WindowOff
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.EVDO_WindowOn">
            <summary>
            EVDO_WindowOn
            </summary>
        </member>
        <member name="F:HslDecoder.TimerEventTypes.EVDO_IRQ">
            <summary>
            EVDO_IRQ
            </summary>
        </member>
        <member name="T:HslDecoder.HslLogPointsEvent">
            <summary>
            Event class that contains list of log points
            </summary>
        </member>
        <member name="F:HslDecoder.HslLogPointsEvent.LogPointList">
            <summary>
            Array of log points
            </summary>
        </member>
        <member name="M:HslDecoder.HslLogPointsEvent.#ctor(System.Collections.Generic.List{HslDecoder.LogPoint})">
            <summary>
            Constructor
            </summary>
            <param name="logPointsList">array of log points</param>
        </member>
        <member name="T:HslDecoder.HslInfoMsgEvent">
            <summary>
            Notification message class.
            </summary>
        </member>
        <member name="M:HslDecoder.HslInfoMsgEvent.#ctor(HslDecoder.HslMsgType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="a_type">message type</param>
            <param name="a_msg">message text</param>
        </member>
        <member name="M:HslDecoder.HslInfoMsgEvent.#ctor(HslDecoder.HslsNotifyCode,HslDecoder.HslMsgType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="a_hslsNotifyCode">HSLS message type</param>
            <param name="a_type">message type</param>
            <param name="a_msg">message text</param>
        </member>
        <member name="M:HslDecoder.HslInfoMsgEvent.ToString">
            <summary>
            Returns just a message of event
            </summary>
        </member>
        <member name="P:HslDecoder.HslInfoMsgEvent.HslsCode">
            <summary>
            Notification code as received from HSLS
            (could be Unknown if message is not originated from HSLS)
            </summary>
        </member>
        <member name="P:HslDecoder.HslInfoMsgEvent.Type">
            <summary>
            Type (severity) of message (arbitrary)
            </summary>
        </member>
        <member name="P:HslDecoder.HslInfoMsgEvent.Message">
            <summary>
            Message text
            </summary>
        </member>
        <member name="T:HslDecoder.ExpandWrapper">
            <summary>
            Expand.exe is a Windows exceutable used to unpack CAB files.
            Unfortunately in old versions of Windows - it fails to re-create directory structure - so SharpHsl contains
            in resources a version of exepand.exe and dpx.dll that solve this problem.
            This class will test if version of tools installed is 
            </summary>
        </member>
        <member name="T:HslDecoder.SpackDeCompressor">
            <summary>
            This class allows to unpack SPACK files.
            </summary>
        </member>
        <member name="M:HslDecoder.SpackDeCompressor.DeCompress(System.String,System.String)">
            <summary>
            Function unpacks all files from SPACK into specified directory.
            </summary>
            <param name="inputSpack">input file to decompress</param>
            <param name="outputDir">output directory where to put files</param>
            <returns>a path to HSLCFG replay profile that was extracted from SPACK file</returns>
        </member>
        <member name="T:HslDecoder.ExitCodeException">
            <summary>
            Thrown when application exit code is not 0
            </summary>
        </member>
        <member name="M:HslDecoder.ExecExtractCommand.RunProgram(System.String,System.String)">
            <summary>
            Execute an external program with arguments.
            Program path with environment variables is not expanded.
            NOTE: This application will pump messages (Application.DoEvents())
                  Disable buttons you don't want user to be able to execute.
            </summary>
            <param name="programName">program name to run</param>
            <param name="arguments">arguments of application to run</param>
        </member>
        <member name="T:HslDecoder.ISymbols">
            <summary>
            Interface to perform conversion between VarEnum values and literal symbols.
            </summary>
        </member>
        <member name="M:HslDecoder.ISymbols.GetSymbolNameForVariable(System.UInt32,System.Int32)">
            <summary>
            Retrieves the name of the Enum symbol associated with given variable.
            </summary>
            <param name="a_id">LogPoint identifier.</param>
            <param name="a_varRank">Rank of the variable.</param>
            <returns>Name of the associated symbol: &quot;&quot; if none.</returns>
        </member>
        <member name="M:HslDecoder.ISymbols.ConvertValuesToStrings(System.String,HslDecoder.StreamIndex,System.UInt32[])">
            <summary>
            Converts the given numeric values to corresponding strings according to the symbol name.
            </summary>
            <param name="a_symbolName">Name of the Enum symbol to use.</param>
            <param name="a_streamIndex">Stream index.</param>
            <param name="a_values">Values to convert.</param>
            <returns>Converted strings.</returns>
        </member>
        <member name="M:HslDecoder.ISymbols.ConvertStringsToValues(System.String,HslDecoder.StreamIndex,System.String[])">
            <summary>
            Converts the given strings to corresponding numeric values according to the symbol name.
            </summary>
            <param name="a_symbolName">Name of the Enum symbol to use.</param>
            <param name="a_streamIndex">Stream index.</param>
            <param name="a_strings">Strings to convert.</param>
            <returns>Converted values.</returns>
        </member>
        <member name="T:HslDecoder.SymbolsManager">
            <summary>
            This class implements the ISymbols interface.
            </summary>
        </member>
        <member name="M:HslDecoder.SymbolsManager.GetSymbolNameForVariable(System.UInt32,System.Int32)">
            <summary>
            Retrieves the name of the Enum symbol associated with given variable.
            </summary>
            <param name="a_id">LogPoint identifier.</param>
            <param name="a_varRank">Rank of the variable.</param>
            <returns>Name of the associated symbol: &quot;&quot; if none.</returns>
        </member>
        <member name="M:HslDecoder.SymbolsManager.ConvertValuesToStrings(System.String,HslDecoder.StreamIndex,System.UInt32[])">
            <summary>
            Converts the given numeric values to corresponding strings according to the symbol name.
            </summary>
            <param name="a_symbolName">Name of the Enum symbol to use.</param>
            <param name="a_streamIndex">Stream index.</param>
            <param name="a_values">Values to convert.</param>
            <returns>Converted strings.</returns>
        </member>
        <member name="M:HslDecoder.SymbolsManager.ConvertStringsToValues(System.String,HslDecoder.StreamIndex,System.String[])">
            <summary>
            Converts the given strings to corresponding numeric values according to the symbol name.
            </summary>
            <param name="a_symbolName">Name of the Enum symbol to use.</param>
            <param name="a_streamIndex">Stream index.</param>
            <param name="a_strings">Strings to convert.</param>
            <returns>Converted values.</returns>
        </member>
        <member name="M:HslDecoder.Tools.IsNumericType(System.Object)">
            <summary>
            Determines whether the specified value is of numeric type.
            </summary>
            <param name="o">The object to check.</param>
            <returns>
            	<c>true</c> if o is a numeric type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HslDecoder.Tools.IsPositive(System.Object,System.Boolean)">
            <summary>
            Determines whether the specified value is positive.
            </summary>
            <param name="Value">The value.</param>
            <param name="ZeroIsPositive">if set to <c>true</c> treats 0 as positive.</param>
            <returns>
            	<c>true</c> if the specified value is positive; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HslDecoder.Tools.ToUnsigned(System.Object)">
            <summary>
            Converts the specified values boxed type to its correpsonding unsigned
            type.
            </summary>
            <param name="Value">The value.</param>
            <returns>A boxed numeric object whos type is unsigned.</returns>
        </member>
        <member name="M:HslDecoder.Tools.ToInteger(System.Object,System.Boolean)">
            <summary>
            Converts the specified values boxed type to its correpsonding integer
            type.
            </summary>
            <returns>A boxed numeric object whos type is an integer type.</returns>
        </member>
        <member name="F:HslDecoder.Tools._regEx">
            <summary>
            Regex object are thread safe and it's much faster to store this precompiled regex
            rather than creating an instance each time sprintf is called
            </summary>
        </member>
        <member name="T:HslDecoder.TraceItem">
            <summary>
            Specifies HSL filter trace item
            </summary>
        </member>
        <member name="M:HslDecoder.TraceItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:HslDecoder.TraceItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:HslDecoder.TraceItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:HslDecoder.TraceItem.Value">
            <summary>
            Gets or sets the integer value.
            </summary>
        </member>
        <member name="P:HslDecoder.TraceItem.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:HslDecoder.TraceItem"/> is enabled.
            </summary>
        </member>
        <member name="T:HslDecoder.TraceFilter">
            <summary>
            Represents HSL filter
            </summary>
        </member>
        <member name="M:HslDecoder.TraceFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HslDecoder.TraceFilter"/> class.
            </summary>
        </member>
        <member name="M:HslDecoder.TraceFilter.Serialize">
            <summary>
            Serializes this instance.
            </summary>
        </member>
        <member name="M:HslDecoder.TraceFilter.Deserialize(System.String)">
            <summary>
            Deserializes the specified XML source.
            </summary>
        </member>
        <member name="M:HslDecoder.TraceFilter.CopySelectionFrom(HslDecoder.TraceFilter)">
            <summary>
            Copies the selection (enable state) from src.
            </summary>
        </member>
        <member name="P:HslDecoder.TraceFilter.Groups">
            <summary>
            Gets the trace groups.
            </summary>
        </member>
        <member name="T:HslDecoder.TraceGroup">
            <summary>
            Specifies HSL filter group
            </summary>
        </member>
        <member name="M:HslDecoder.TraceGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="M:HslDecoder.TraceGroup.EnableAll(System.Boolean)">
            <summary>
            Enables or disables all subitems.
            </summary>
        </member>
        <member name="P:HslDecoder.TraceGroup.Items">
            <summary>
            List of individual traces in the group
            </summary>
        </member>
        <member name="P:HslDecoder.TraceGroup.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:HslDecoder.Var">
            <summary>
            This class exposes the log point parameters (also called variables) to the end user application.
            It wraps around the _baseVar member and uses the Properties member to capture the 'static' information. 
            The other members are the 'dynamic' elements of a variable.
            </summary>
        </member>
        <member name="F:HslDecoder.Var.Properties">
            <summary>
            This captures all the attributes of this log point.
            </summary>
        </member>
        <member name="F:HslDecoder.Var._streamIndex">
            <summary>
            Hold the index of the stream on which this log point point was received.
            </summary>
        </member>
        <member name="F:HslDecoder.Var._rawData">
            <summary>
            Data payload
            </summary>
        </member>
        <member name="M:HslDecoder.Var.#ctor(HslDecoder.BaseVar,System.UInt16,System.UInt16[],HslDecoder.StreamIndex)">
            <summary>
            Instance created when resolving each element of an element as a Var.
            </summary>
            <param name="a_baseVar"></param>
            <param name="a_index"></param>
            <param name="a_rawData"></param>
            <param name="a_streamIndex"></param>
        </member>
        <member name="M:HslDecoder.Var.GetUshort">
            <summary>
            Returns the underlying raw ushort for this variable.
            </summary>
            <returns>ushort</returns>
        </member>
        <member name="M:HslDecoder.Var.GetDouble">
            <summary>
            Returns the double value representation of the logged ushort data.
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:HslDecoder.Var.GetInt">
            <summary>
            Returns the int value representation of the logged ushort data.
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:HslDecoder.Var.GetString">
            <summary>
            Returns the string representation of the logged ushort data applying the formatting that was specified.
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslDecoder.VarArray">
            <summary>
            Represents content of array log point (logged using M_FrHslArrayX macro)
            </summary>
        </member>
        <member name="F:HslDecoder.VarArray.Properties">
            <summary>
            Properities of array
            </summary>
        </member>
        <member name="F:HslDecoder.VarArray._address">
            <summary>
            Contains the first 2 ushorts of the logged raw data
            </summary>
        </member>
        <member name="F:HslDecoder.VarArray._rawData">
            <summary>
            Data payload without the first 2 ushorts which are contained in _address
            </summary>
        </member>
        <member name="F:HslDecoder.VarArray._streamIndex">
            <summary>
            Hold the index of the stream on which this log point point was received.
            </summary>
        </member>
        <member name="M:HslDecoder.VarArray.GetDoubles">
            <summary>
            Return a double array for the underlying raw data array of ushorts.
            The property Address should be used instead to access the first two ushorts.
            </summary>
            <returns>double[]</returns>
        </member>
        <member name="M:HslDecoder.VarArray.GetInts">
            <summary>
            Return an int array for the underlying raw data array of ushorts
            The property Address should be used instead to access the first two ushorts.
            </summary>
            <returns>int[]</returns>
        </member>
        <member name="M:HslDecoder.VarArray.GetRawData">
            <summary>
            Return the underlying ushort array of data.
            It doesn't includes the first two ushorts which constitute
            the address of the array on the target; Use property Address to access that data
            </summary>
            <returns>ushort[]</returns>
        </member>
        <member name="M:HslDecoder.VarArray.GetString">
            <summary>
            Returns the string representation of all the elements of the array
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:HslDecoder.VarArray.Address">
            <summary>
            Address of the array on the target as logged by HSL.
            All array log point types have this property which is stored
            in the first two ushorts of the log point.
            </summary>
        </member>
        <member name="P:HslDecoder.VarArray.Item(System.Int32)">
            <summary>
            Access individul elements of the array
            </summary>
            <param name="index"></param>
            <returns>Var</returns>
        </member>
        <member name="P:HslDecoder.VarArray.Length">
            <summary>
            Count of elements in the array. Dependending on the type of data, this count
            may not necessarily equal the count of the underlying raw ushort[]. 
            E.g. Array of type Uint8 will have 2*(ushort[].Length).
            This Length does not include the first two ushorts which contain
            the address of the array on the target; Use #Address property instead to access that data.
            </summary>
        </member>
    </members>
</doc>
